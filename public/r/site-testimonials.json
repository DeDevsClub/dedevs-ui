{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "site-testimonials",
  "type": "registry:ui",
  "description": "Testimonials carousel component",
  "files": [
    {
      "path": "packages/site/testimonials.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Star, Quote, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@repo/shadcn-ui/lib/utils\";\nimport { Button } from \"@repo/shadcn-ui/components/ui/button\";\n\nexport interface Testimonial {\n  id: string;\n  text: string;\n  author: string;\n  role: string;\n  company?: string;\n  avatar?: string;\n  rating?: number;\n}\n\nexport interface TestimonialsProps {\n  testimonials: Testimonial[];\n  title?: string;\n  subtitle?: string;\n  autoPlay?: boolean;\n  autoPlayInterval?: number;\n  showNavigation?: boolean;\n  showRating?: boolean;\n  className?: string;\n}\n\nconst fadeInUp = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      duration: 0.6,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nconst slideVariants = {\n  enter: (direction: number) => ({\n    x: direction > 0 ? 300 : -300,\n    opacity: 0,\n  }),\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n  exit: (direction: number) => ({\n    zIndex: 0,\n    x: direction < 0 ? 300 : -300,\n    opacity: 0,\n  }),\n};\n\nexport function Testimonials({\n  testimonials,\n  title = \"What our community says\",\n  subtitle,\n  autoPlay = true,\n  autoPlayInterval = 5000,\n  showNavigation = true,\n  showRating = true,\n  className,\n}: TestimonialsProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [direction, setDirection] = useState(0);\n\n  const paginate = (newDirection: number) => {\n    setDirection(newDirection);\n    setCurrentIndex((prevIndex) => {\n      if (newDirection === 1) {\n        return prevIndex === testimonials.length - 1 ? 0 : prevIndex + 1;\n      } else {\n        return prevIndex === 0 ? testimonials.length - 1 : prevIndex - 1;\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!autoPlay || testimonials.length <= 1) return;\n\n    const interval = setInterval(() => {\n      paginate(1);\n    }, autoPlayInterval);\n\n    return () => clearInterval(interval);\n  }, [autoPlay, autoPlayInterval, testimonials.length]);\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={cn(\n          \"w-4 h-4\",\n          i < rating\n            ? \"text-yellow-400 fill-yellow-400\"\n            : \"text-neutral-300 dark:text-neutral-600\"\n        )}\n      />\n    ));\n  };\n\n  if (testimonials.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className={cn(\"py-24 sm:py-32 bg-neutral-50 dark:bg-neutral-900\", className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n          variants={fadeInUp}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100 sm:text-4xl\">\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"mt-4 text-lg text-neutral-600 dark:text-neutral-400\">\n              {subtitle}\n            </p>\n          )}\n        </motion.div>\n\n        {/* Testimonials Carousel */}\n        <div className=\"relative max-w-4xl mx-auto\">\n          <div className=\"relative h-80 overflow-hidden\">\n            <AnimatePresence initial={false} custom={direction}>\n              <motion.div\n                key={currentIndex}\n                custom={direction}\n                variants={slideVariants}\n                initial=\"enter\"\n                animate=\"center\"\n                exit=\"exit\"\n                transition={{\n                  x: { type: \"spring\", stiffness: 300, damping: 30 },\n                  opacity: { duration: 0.2 },\n                }}\n                className=\"absolute inset-0 flex items-center justify-center\"\n              >\n                <div className=\"bg-white dark:bg-neutral-800 rounded-2xl p-8 shadow-lg border border-neutral-200 dark:border-neutral-700 max-w-3xl w-full\">\n                  <div className=\"flex flex-col items-center text-center space-y-6\">\n                    {/* Quote Icon */}\n                    <Quote className=\"w-8 h-8 text-neutral-400 dark:text-neutral-500\" />\n\n                    {/* Testimonial Text */}\n                    <blockquote className=\"text-lg sm:text-xl text-neutral-700 dark:text-neutral-300 leading-relaxed\">\n                      \"{testimonials[currentIndex].text}\"\n                    </blockquote>\n\n                    {/* Rating */}\n                    {showRating && testimonials[currentIndex].rating && (\n                      <div className=\"flex items-center gap-1\">\n                        {renderStars(testimonials[currentIndex].rating)}\n                      </div>\n                    )}\n\n                    {/* Author Info */}\n                    <div className=\"flex items-center gap-4\">\n                      {testimonials[currentIndex].avatar && (\n                        <img\n                          src={testimonials[currentIndex].avatar}\n                          alt={testimonials[currentIndex].author}\n                          className=\"w-12 h-12 rounded-full object-cover\"\n                        />\n                      )}\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold text-neutral-900 dark:text-neutral-100\">\n                          {testimonials[currentIndex].author}\n                        </div>\n                        <div className=\"text-sm text-neutral-500 dark:text-neutral-400\">\n                          {testimonials[currentIndex].role}\n                          {testimonials[currentIndex].company && (\n                            <span> at {testimonials[currentIndex].company}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          {/* Navigation */}\n          {showNavigation && testimonials.length > 1 && (\n            <div className=\"flex items-center justify-center gap-4 mt-8\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => paginate(-1)}\n                className=\"p-2\"\n                aria-label=\"Previous testimonial\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n\n              {/* Dots Indicator */}\n              <div className=\"flex gap-2\">\n                {testimonials.map((_, index) => (\n                  <button\n                    key={`dot-${index}`}\n                    onClick={() => {\n                      setDirection(index > currentIndex ? 1 : -1);\n                      setCurrentIndex(index);\n                    }}\n                    className={cn(\n                      \"w-2 h-2 rounded-full transition-colors\",\n                      index === currentIndex\n                        ? \"bg-neutral-900 dark:bg-neutral-100\"\n                        : \"bg-neutral-300 dark:bg-neutral-600\"\n                    )}\n                    aria-label={`Go to testimonial ${index + 1}`}\n                  />\n                ))}\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => paginate(1)}\n                className=\"p-2\"\n                aria-label=\"Next testimonial\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Grid View for Multiple Testimonials */}\n        {testimonials.length > 3 && (\n          <motion.div\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n            variants={{\n              hidden: { opacity: 0 },\n              visible: {\n                opacity: 1,\n                transition: {\n                  staggerChildren: 0.1,\n                  delayChildren: 0.3,\n                },\n              },\n            }}\n            className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-16\"\n          >\n            {testimonials.slice(0, 6).map((testimonial, index) => (\n              <motion.div\n                key={testimonial.id}\n                variants={fadeInUp}\n                className=\"bg-white dark:bg-neutral-800 rounded-xl p-6 shadow-sm border border-neutral-200 dark:border-neutral-700\"\n              >\n                <div className=\"space-y-4\">\n                  {showRating && testimonial.rating && (\n                    <div className=\"flex items-center gap-1\">\n                      {renderStars(testimonial.rating)}\n                    </div>\n                  )}\n\n                  <blockquote className=\"text-neutral-700 dark:text-neutral-300\">\n                    \"{testimonial.text}\"\n                  </blockquote>\n\n                  <div className=\"flex items-center gap-3\">\n                    {testimonial.avatar && (\n                      <img\n                        src={testimonial.avatar}\n                        alt={testimonial.author}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                    )}\n                    <div>\n                      <div className=\"font-medium text-neutral-900 dark:text-neutral-100\">\n                        {testimonial.author}\n                      </div>\n                      <div className=\"text-sm text-neutral-500 dark:text-neutral-400\">\n                        {testimonial.role}\n                        {testimonial.company && <span> at {testimonial.company}</span>}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
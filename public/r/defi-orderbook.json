{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "defi-orderbook",
  "type": "registry:ui",
  "description": "Orderbook component for displaying real-time orderbook data",
  "files": [
    {
      "path": "packages/defi/orderbook.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { TrendingUp } from 'lucide-react'\n\ninterface OrderBookEntry {\n    price: number\n    amount: number\n    total: number\n}\n\nexport function OrderBook() {\n    const [asks, setAsks] = useState<OrderBookEntry[]>([])\n    const [bids, setBids] = useState<OrderBookEntry[]>([])\n    const [spread, setSpread] = useState(0)\n\n    // Simulate real-time order book data\n    useEffect(() => {\n        const generateOrderBook = () => {\n            const basePrice = 2345.67\n            const newAsks: OrderBookEntry[] = []\n            const newBids: OrderBookEntry[] = []\n\n            // Generate asks (sell orders)\n            for (let i = 0; i < 8; i++) {\n                const price = basePrice + (i + 1) * (Math.random() * 2 + 0.5)\n                const amount = Math.random() * 10 + 0.1\n                newAsks.push({\n                    price: parseFloat(price.toFixed(2)),\n                    amount: parseFloat(amount.toFixed(4)),\n                    total: parseFloat((price * amount).toFixed(2))\n                })\n            }\n\n            // Generate bids (buy orders)\n            for (let i = 0; i < 8; i++) {\n                const price = basePrice - (i + 1) * (Math.random() * 2 + 0.5)\n                const amount = Math.random() * 10 + 0.1\n                newBids.push({\n                    price: parseFloat(price.toFixed(2)),\n                    amount: parseFloat(amount.toFixed(4)),\n                    total: parseFloat((price * amount).toFixed(2))\n                })\n            }\n\n            setAsks(newAsks)\n            setBids(newBids)\n            setSpread(newAsks[0]?.price - newBids[0]?.price || 0)\n        }\n\n        generateOrderBook()\n        const interval = setInterval(generateOrderBook, 2000)\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <Card className=\"h-full border-gray-200/60\">\n            <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-sm font-semibold text-gray-900\">Order Book</CardTitle>\n                    <Badge className=\"h-5 px-2 text-xs bg-blue-50 text-blue-700\">\n                        ETH/USD\n                    </Badge>\n                </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n                <div className=\"space-y-1\">\n                    {/* Header */}\n                    <div className=\"grid grid-cols-3 gap-4 px-4 py-2 text-xs font-medium text-gray-500 border-b border-gray-100\">\n                        <span>Price (USD)</span>\n                        <span className=\"text-right\">Amount (ETH)</span>\n                        <span className=\"text-right\">Total</span>\n                    </div>\n\n                    {/* Asks (Sell Orders) */}\n                    <div className=\"space-y-0.5\">\n                        {asks.slice().reverse().map((ask, index) => (\n                            <div\n                                key={`ask-${index}`}\n                                className=\"grid grid-cols-3 gap-4 px-4 py-1 text-xs hover:bg-red-50/50 transition-colors relative\"\n                            >\n                                <div\n                                    className=\"absolute right-0 top-0 bottom-0 bg-red-50/30\"\n                                    style={{ width: `${Math.min((ask.amount / 10) * 100, 100)}%` }}\n                                />\n                                <span className=\"text-red-600 font-mono relative z-10\">${ask.price}</span>\n                                <span className=\"text-right text-gray-900 font-mono relative z-10\">{ask.amount}</span>\n                                <span className=\"text-right text-gray-600 font-mono relative z-10\">${ask.total}</span>\n                            </div>\n                        ))}\n                    </div>\n\n                    {/* Spread */}\n                    <div className=\"px-4 py-3 bg-gray-50/50 border-y border-gray-100\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-gray-600\">Spread</span>\n                            <div className=\"flex items-center gap-2\">\n                                <span className=\"font-mono text-gray-900\">${spread.toFixed(2)}</span>\n                                <TrendingUp className=\"w-3 h-3 text-emerald-500\" />\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Bids (Buy Orders) */}\n                    <div className=\"space-y-0.5\">\n                        {bids.map((bid, index) => (\n                            <div\n                                key={`bid-${index}`}\n                                className=\"grid grid-cols-3 gap-4 px-4 py-1 text-xs hover:bg-emerald-50/50 transition-colors relative\"\n                            >\n                                <div\n                                    className=\"absolute right-0 top-0 bottom-0 bg-emerald-50/30\"\n                                    style={{ width: `${Math.min((bid.amount / 10) * 100, 100)}%` }}\n                                />\n                                <span className=\"text-emerald-600 font-mono relative z-10\">${bid.price}</span>\n                                <span className=\"text-right text-gray-900 font-mono relative z-10\">{bid.amount}</span>\n                                <span className=\"text-right text-gray-600 font-mono relative z-10\">${bid.total}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}
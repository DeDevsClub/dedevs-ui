{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "dedevs-ui",
  "homepage": "https://ui.dedevs.com",
  "items": [
    {
      "name": "ai-branch",
      "type": "registry:ui",
      "description": "AI conversation branch component for displaying branched conversations",
      "files": [
        {
          "path": "packages/ai/branch.tsx",
          "content": "'use client';\n\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport type { HTMLAttributes, ReactElement, ReactNode } from 'react';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\ntype AIBranchContextType = {\n  currentBranch: number;\n  totalBranches: number;\n  goToPrevious: () => void;\n  goToNext: () => void;\n  branches: ReactElement[];\n  setBranches: (branches: ReactElement[]) => void;\n};\n\nconst AIBranchContext = createContext<AIBranchContextType | null>(null);\n\nconst useAIBranch = () => {\n  const context = useContext(AIBranchContext);\n\n  if (!context) {\n    throw new Error('AIBranch components must be used within AIBranch');\n  }\n\n  return context;\n};\n\nexport type AIBranchProps = HTMLAttributes<HTMLDivElement> & {\n  defaultBranch?: number;\n  onBranchChange?: (branchIndex: number) => void;\n};\n\nexport const AIBranch = ({\n  defaultBranch = 0,\n  onBranchChange,\n  className,\n  ...props\n}: AIBranchProps) => {\n  const [currentBranch, setCurrentBranch] = useState(defaultBranch);\n  const [branches, setBranches] = useState<ReactElement[]>([]);\n\n  const handleBranchChange = (newBranch: number) => {\n    setCurrentBranch(newBranch);\n    onBranchChange?.(newBranch);\n  };\n\n  const goToPrevious = () => {\n    const newBranch =\n      currentBranch > 0 ? currentBranch - 1 : branches.length - 1;\n    handleBranchChange(newBranch);\n  };\n\n  const goToNext = () => {\n    const newBranch =\n      currentBranch < branches.length - 1 ? currentBranch + 1 : 0;\n    handleBranchChange(newBranch);\n  };\n\n  const contextValue: AIBranchContextType = {\n    currentBranch,\n    totalBranches: branches.length,\n    goToPrevious,\n    goToNext,\n    branches,\n    setBranches,\n  };\n\n  return (\n    <AIBranchContext.Provider value={contextValue}>\n      <div\n        className={cn('grid w-full gap-2 [&>div]:pb-0', className)}\n        {...props}\n      />\n    </AIBranchContext.Provider>\n  );\n};\n\nexport type AIBranchMessagesProps = {\n  children: ReactElement | ReactElement[];\n};\n\nexport const AIBranchMessages = ({ children }: AIBranchMessagesProps) => {\n  const { currentBranch, setBranches, branches } = useAIBranch();\n  const childrenArray = Array.isArray(children) ? children : [children];\n\n  // Use useEffect to update branches when they change\n  useEffect(() => {\n    if (branches.length !== childrenArray.length) {\n      setBranches(childrenArray);\n    }\n  }, [childrenArray, branches, setBranches]);\n\n  return childrenArray.map((branch, index) => (\n    <div\n      className={cn(\n        'grid gap-2 [&>div]:pb-0',\n        index === currentBranch ? 'block' : 'hidden'\n      )}\n      key={index}\n    >\n      {branch}\n    </div>\n  ));\n};\n\nexport type AIBranchSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  from: 'user' | 'assistant';\n};\n\nexport const AIBranchSelector = ({\n  className,\n  from,\n  ...props\n}: AIBranchSelectorProps) => {\n  const { totalBranches } = useAIBranch();\n\n  // Don't render if there's only one branch\n  if (totalBranches <= 1) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center gap-2 self-end px-10',\n        from === 'assistant' ? 'justify-start' : 'justify-end',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type AIBranchPreviousProps = {\n  className?: string;\n  children?: ReactNode;\n};\n\nexport const AIBranchPrevious = ({\n  className,\n  children,\n}: AIBranchPreviousProps) => {\n  const { goToPrevious, totalBranches } = useAIBranch();\n\n  return (\n    <Button\n      aria-label=\"Previous branch\"\n      className={cn(\n        'size-7 shrink-0 rounded-full text-muted-foreground transition-colors',\n        'hover:bg-accent hover:text-foreground',\n        'disabled:pointer-events-none disabled:opacity-50',\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToPrevious}\n      size=\"icon\"\n      type=\"button\"\n      variant=\"ghost\"\n    >\n      {children ?? <ChevronLeft size={14} />}\n    </Button>\n  );\n};\n\nexport type AIBranchNextProps = {\n  className?: string;\n  children?: ReactNode;\n};\n\nexport const AIBranchNext = ({ className, children }: AIBranchNextProps) => {\n  const { goToNext, totalBranches } = useAIBranch();\n\n  return (\n    <Button\n      aria-label=\"Next branch\"\n      className={cn(\n        'size-7 shrink-0 rounded-full text-muted-foreground transition-colors',\n        'hover:bg-accent hover:text-foreground',\n        'disabled:pointer-events-none disabled:opacity-50',\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToNext}\n      size=\"icon\"\n      type=\"button\"\n      variant=\"ghost\"\n    >\n      {children ?? <ChevronRight size={14} />}\n    </Button>\n  );\n};\n\nexport type AIBranchPageProps = {\n  className?: string;\n};\n\nexport const AIBranchPage = ({ className }: AIBranchPageProps) => {\n  const { currentBranch, totalBranches } = useAIBranch();\n\n  return (\n    <span\n      className={cn(\n        'font-medium text-muted-foreground text-xs tabular-nums',\n        className\n      )}\n    >\n      {currentBranch + 1} of {totalBranches}\n    </span>\n  );\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-conversation",
      "type": "registry:ui",
      "description": "AI conversation container component",
      "files": [
        {
          "path": "packages/ai/conversation.tsx",
          "content": "'use client';\n\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport { ArrowDown } from 'lucide-react';\nimport type { ComponentProps } from 'react';\nimport { useCallback } from 'react';\nimport { StickToBottom, useStickToBottomContext } from 'use-stick-to-bottom';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type AIConversationProps = ComponentProps<typeof StickToBottom>;\n\nexport const AIConversation = ({\n  className,\n  ...props\n}: AIConversationProps) => (\n  <StickToBottom\n    className={cn('relative flex-1 overflow-y-auto', className)}\n    initial=\"smooth\"\n    resize=\"smooth\"\n    role=\"log\"\n    {...props}\n  />\n);\n\nexport type AIConversationContentProps = ComponentProps<\n  typeof StickToBottom.Content\n>;\n\nexport const AIConversationContent = ({\n  className,\n  ...props\n}: AIConversationContentProps) => (\n  <StickToBottom.Content className={cn('p-4', className)} {...props} />\n);\n\nexport const AIConversationScrollButton = () => {\n  const { isAtBottom, scrollToBottom } = useStickToBottomContext();\n\n  const handleScrollToBottom = useCallback(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return (\n    !isAtBottom && (\n      <Button\n        className=\"absolute bottom-4 left-[50%] translate-x-[-50%] rounded-full\"\n        onClick={handleScrollToBottom}\n        size=\"icon\"\n        type=\"button\"\n        variant=\"outline\"\n      >\n        <ArrowDown className=\"size-4\" />\n      </Button>\n    )\n  );\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-input",
      "type": "registry:ui",
      "description": "AI chat input component with advanced features",
      "files": [
        {
          "path": "packages/ai/input.tsx",
          "content": "'use client';\n\nimport { Loader2Icon, Send, SquareIcon, X } from 'lucide-react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from 'react';\nimport { Children, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@repo/shadcn-ui/components/ui/select';\nimport { Textarea } from '@repo/shadcn-ui/components/ui/textarea';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\ntype UseAutoResizeTextareaProps = {\n  minHeight: number;\n  maxHeight?: number;\n};\n\nconst useAutoResizeTextarea = ({\n  minHeight,\n  maxHeight,\n}: UseAutoResizeTextareaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback(\n    (reset?: boolean) => {\n      const textarea = textareaRef.current;\n      if (!textarea) {\n        return;\n      }\n\n      if (reset) {\n        textarea.style.height = `${minHeight}px`;\n        return;\n      }\n\n      // Temporarily shrink to get the right scrollHeight\n      textarea.style.height = `${minHeight}px`;\n\n      // Calculate new height\n      const newHeight = Math.max(\n        minHeight,\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\n      );\n\n      textarea.style.height = `${newHeight}px`;\n    },\n    [minHeight, maxHeight]\n  );\n\n  useEffect(() => {\n    // Set initial height\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = `${minHeight}px`;\n    }\n  }, [minHeight]);\n\n  // Adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  return { textareaRef, adjustHeight };\n};\n\nexport type AIInputProps = HTMLAttributes<HTMLFormElement>;\n\nexport const AIInput = ({ className, ...props }: AIInputProps) => (\n  <form\n    className={cn(\n      'w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\n\nexport const AIInputTextarea = ({\n  onChange,\n  className,\n  placeholder = 'What would you like to know?',\n  minHeight = 48,\n  maxHeight = 164,\n  ...props\n}: AIInputTextareaProps) => {\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n  });\n\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      const form = e.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      className={cn(\n        'w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0',\n        'bg-transparent dark:bg-transparent',\n        'focus-visible:ring-0',\n        className\n      )}\n      name=\"message\"\n      onChange={(e) => {\n        adjustHeight();\n        onChange?.(e);\n      }}\n      onKeyDown={handleKeyDown}\n      placeholder={placeholder}\n      ref={textareaRef}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputToolbarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputToolbar = ({\n  className,\n  ...props\n}: AIInputToolbarProps) => (\n  <div\n    className={cn('flex items-center justify-between p-1', className)}\n    {...props}\n  />\n);\n\nexport type AIInputToolsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputTools = ({ className, ...props }: AIInputToolsProps) => (\n  <div\n    className={cn(\n      'flex items-center gap-1',\n      '[&_button:first-child]:rounded-bl-xl',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputButtonProps = ComponentProps<typeof Button>;\n\nexport const AIInputButton = ({\n  variant = 'ghost',\n  className,\n  size,\n  ...props\n}: AIInputButtonProps) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';\n\n  return (\n    <Button\n      className={cn(\n        'shrink-0 gap-1.5 rounded-lg',\n        variant === 'ghost' && 'text-muted-foreground',\n        newSize === 'default' && 'px-3',\n        className\n      )}\n      size={newSize}\n      type=\"button\"\n      variant={variant}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputSubmitProps = ComponentProps<typeof Button> & {\n  status?: 'submitted' | 'streaming' | 'ready' | 'error';\n};\n\nexport const AIInputSubmit = ({\n  className,\n  variant = 'default',\n  size = 'icon',\n  status,\n  children,\n  ...props\n}: AIInputSubmitProps) => {\n  let Icon = <Send />;\n\n  if (status === 'submitted') {\n    Icon = <Loader2Icon className=\"animate-spin\" />;\n  } else if (status === 'streaming') {\n    Icon = <SquareIcon />;\n  } else if (status === 'error') {\n    Icon = <X />;\n  }\n\n  return (\n    <Button\n      className={cn('gap-1.5 rounded-lg rounded-br-xl', className)}\n      size={size}\n      type=\"submit\"\n      variant={variant}\n      {...props}\n    >\n      {children ?? Icon}\n    </Button>\n  );\n};\n\nexport type AIInputModelSelectProps = ComponentProps<typeof Select>;\n\nexport const AIInputModelSelect = (props: AIInputModelSelectProps) => (\n  <Select {...props} />\n);\n\nexport type AIInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nexport const AIInputModelSelectTrigger = ({\n  className,\n  ...props\n}: AIInputModelSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors',\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nexport const AIInputModelSelectContent = ({\n  className,\n  ...props\n}: AIInputModelSelectContentProps) => (\n  <SelectContent className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const AIInputModelSelectItem = ({\n  className,\n  ...props\n}: AIInputModelSelectItemProps) => (\n  <SelectItem className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const AIInputModelSelectValue = ({\n  className,\n  ...props\n}: AIInputModelSelectValueProps) => (\n  <SelectValue className={cn(className)} {...props} />\n);\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-message",
      "type": "registry:ui",
      "description": "AI message display component",
      "files": [
        {
          "path": "packages/ai/message.tsx",
          "content": "import {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from '@repo/shadcn-ui/components/ui/avatar';\nimport type { ComponentProps, HTMLAttributes } from 'react';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type AIMessageProps = HTMLAttributes<HTMLDivElement> & {\n  from: 'user' | 'assistant';\n};\n\nexport const AIMessage = ({ className, from, ...props }: AIMessageProps) => (\n  <div\n    className={cn(\n      'group flex w-full items-end justify-end gap-2 py-4',\n      from === 'user' ? 'is-user' : 'is-assistant flex-row-reverse justify-end',\n      '[&>div]:max-w-[80%]',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIMessageContentProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIMessageContent = ({\n  children,\n  className,\n  ...props\n}: AIMessageContentProps) => (\n  <div\n    className={cn(\n      'flex flex-col gap-2 rounded-lg px-4 py-3 text-sm',\n      'bg-muted text-foreground',\n      'group-[.is-user]:bg-primary group-[.is-user]:text-primary-foreground',\n      className\n    )}\n    {...props}\n  >\n    <div className=\"is-user:dark\">{children}</div>\n  </div>\n);\n\nexport type AIMessageAvatarProps = ComponentProps<typeof Avatar> & {\n  src: string;\n  name?: string;\n};\n\nexport const AIMessageAvatar = ({\n  src,\n  name,\n  className,\n  ...props\n}: AIMessageAvatarProps) => (\n  <Avatar className={cn('size-8', className)} {...props}>\n    <AvatarImage alt=\"\" className=\"mt-0 mb-0\" src={src} />\n    <AvatarFallback>{name?.slice(0, 2) || 'ME'}</AvatarFallback>\n  </Avatar>\n);\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-reasoning",
      "type": "registry:ui",
      "description": "AI reasoning visualization component",
      "files": [
        {
          "path": "packages/ai/reasoning.tsx",
          "content": "'use client';\n\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@repo/shadcn-ui/components/ui/collapsible';\nimport { ChevronDownIcon } from 'lucide-react';\nimport type { ComponentProps } from 'react';\nimport { createContext, memo, useContext, useEffect, useState } from 'react';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\nimport { AIResponse } from './response';\n\ntype AIReasoningContextValue = {\n  isStreaming: boolean;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  duration: number;\n};\n\nconst AIReasoningContext = createContext<AIReasoningContextValue | null>(null);\n\nconst useAIReasoning = () => {\n  const context = useContext(AIReasoningContext);\n  if (!context) {\n    throw new Error('AIReasoning components must be used within AIReasoning');\n  }\n  return context;\n};\n\nexport type AIReasoningProps = ComponentProps<typeof Collapsible> & {\n  isStreaming?: boolean;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  duration?: number;\n};\n\nexport const AIReasoning = memo(\n  ({\n    className,\n    isStreaming = false,\n    open,\n    defaultOpen = false,\n    onOpenChange,\n    duration: durationProp,\n    children,\n    ...props\n  }: AIReasoningProps) => {\n    const [isOpen, setIsOpen] = useControllableState({\n      prop: open,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n    const [duration, setDuration] = useControllableState({\n      prop: durationProp,\n      defaultProp: 0,\n    });\n\n    const [hasAutoClosedRef, setHasAutoClosedRef] = useState(false);\n    const [startTime, setStartTime] = useState<number | null>(null);\n\n    // Track duration when streaming starts and ends\n    useEffect(() => {\n      if (isStreaming) {\n        if (startTime === null) {\n          setStartTime(Date.now());\n        }\n      } else if (startTime !== null) {\n        setDuration(Math.round((Date.now() - startTime) / 1000));\n        setStartTime(null);\n      }\n    }, [isStreaming, startTime, setDuration]);\n\n    // Auto-open when streaming starts, auto-close when streaming ends (once only)\n    useEffect(() => {\n      if (isStreaming && !isOpen) {\n        setIsOpen(true);\n      } else if (!isStreaming && isOpen && !defaultOpen && !hasAutoClosedRef) {\n        // Add a small delay before closing to allow user to see the content\n        const timer = setTimeout(() => {\n          setIsOpen(false);\n          setHasAutoClosedRef(true);\n        }, 1000);\n        return () => clearTimeout(timer);\n      }\n    }, [isStreaming, isOpen, defaultOpen, setIsOpen, hasAutoClosedRef]);\n\n    const handleOpenChange = (open: boolean) => {\n      setIsOpen(open);\n    };\n\n    return (\n      <AIReasoningContext.Provider\n        value={{ isStreaming, isOpen, setIsOpen, duration }}\n      >\n        <Collapsible\n          className={cn('not-prose mb-4', className)}\n          onOpenChange={handleOpenChange}\n          open={isOpen}\n          {...props}\n        >\n          {children}\n        </Collapsible>\n      </AIReasoningContext.Provider>\n    );\n  }\n);\n\nexport type AIReasoningTriggerProps = ComponentProps<\n  typeof CollapsibleTrigger\n> & {\n  title?: string;\n};\n\nexport const AIReasoningTrigger = memo(\n  ({\n    className,\n    title = 'Reasoning',\n    children,\n    ...props\n  }: AIReasoningTriggerProps) => {\n    const { isStreaming, isOpen, duration } = useAIReasoning();\n\n    return (\n      <CollapsibleTrigger\n        className={cn(\n          'flex items-center gap-2 text-muted-foreground text-sm',\n          className\n        )}\n        {...props}\n      >\n        {children ?? (\n          <>\n            {isStreaming && duration === 0 ? (\n              <p>Thinking...</p>\n            ) : (\n              <p>Thought for {duration} seconds</p>\n            )}\n            <ChevronDownIcon\n              className={cn(\n                'size-4 text-muted-foreground transition-transform',\n                isOpen ? 'rotate-180' : 'rotate-0'\n              )}\n            />\n          </>\n        )}\n      </CollapsibleTrigger>\n    );\n  }\n);\n\nexport type AIReasoningContentProps = ComponentProps<\n  typeof CollapsibleContent\n> & {\n  children: string;\n};\n\nexport const AIReasoningContent = memo(\n  ({ className, children, ...props }: AIReasoningContentProps) => (\n    <CollapsibleContent\n      className={cn('mt-4 text-muted-foreground text-sm', className)}\n      {...props}\n    >\n      <AIResponse className=\"grid gap-2\">{children}</AIResponse>\n    </CollapsibleContent>\n  )\n);\n\nAIReasoning.displayName = 'AIReasoning';\nAIReasoningTrigger.displayName = 'AIReasoningTrigger';\nAIReasoningContent.displayName = 'AIReasoningContent';\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-response",
      "type": "registry:ui",
      "description": "AI response component with streaming support",
      "files": [
        {
          "path": "packages/ai/response.tsx",
          "content": "'use client';\n\nimport {\n  type BundledLanguage,\n  CodeBlock,\n  CodeBlockBody,\n  CodeBlockContent,\n  CodeBlockCopyButton,\n  CodeBlockFilename,\n  CodeBlockFiles,\n  CodeBlockHeader,\n  CodeBlockItem,\n  type CodeBlockProps,\n  CodeBlockSelect,\n  CodeBlockSelectContent,\n  CodeBlockSelectItem,\n  CodeBlockSelectTrigger,\n  CodeBlockSelectValue,\n} from '@repo/code-block';\nimport type { HTMLAttributes } from 'react';\nimport { memo } from 'react';\nimport ReactMarkdown, { type Options } from 'react-markdown';\nimport rehypeKatex from 'rehype-katex';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\nimport 'katex/dist/katex.min.css';\n\nexport type AIResponseProps = HTMLAttributes<HTMLDivElement> & {\n  children: Options['children'];\n  options?: Options;\n};\n\nconst components: Options['components'] = {\n  ol: ({ node, children, className, ...props }) => (\n    <ol className={cn('ml-4 list-outside list-decimal', className)} {...props}>\n      {children}\n    </ol>\n  ),\n  li: ({ node, children, className, ...props }) => (\n    <li className={cn('py-1', className)} {...props}>\n      {children}\n    </li>\n  ),\n  ul: ({ node, children, className, ...props }) => (\n    <ul className={cn('ml-4 list-outside list-decimal', className)} {...props}>\n      {children}\n    </ul>\n  ),\n  strong: ({ node, children, className, ...props }) => (\n    <span className={cn('font-semibold', className)} {...props}>\n      {children}\n    </span>\n  ),\n  a: ({ node, children, className, ...props }) => (\n    <a\n      className={cn('font-medium text-primary underline', className)}\n      rel=\"noreferrer\"\n      target=\"_blank\"\n      {...props}\n    >\n      {children}\n    </a>\n  ),\n  h1: ({ node, children, className, ...props }) => (\n    <h1\n      className={cn('mt-6 mb-2 font-semibold text-3xl', className)}\n      {...props}\n    >\n      {children}\n    </h1>\n  ),\n  h2: ({ node, children, className, ...props }) => (\n    <h2\n      className={cn('mt-6 mb-2 font-semibold text-2xl', className)}\n      {...props}\n    >\n      {children}\n    </h2>\n  ),\n  h3: ({ node, children, className, ...props }) => (\n    <h3 className={cn('mt-6 mb-2 font-semibold text-xl', className)} {...props}>\n      {children}\n    </h3>\n  ),\n  h4: ({ node, children, className, ...props }) => (\n    <h4 className={cn('mt-6 mb-2 font-semibold text-lg', className)} {...props}>\n      {children}\n    </h4>\n  ),\n  h5: ({ node, children, className, ...props }) => (\n    <h5\n      className={cn('mt-6 mb-2 font-semibold text-base', className)}\n      {...props}\n    >\n      {children}\n    </h5>\n  ),\n  h6: ({ node, children, className, ...props }) => (\n    <h6 className={cn('mt-6 mb-2 font-semibold text-sm', className)} {...props}>\n      {children}\n    </h6>\n  ),\n  pre: ({ node, className, children }) => {\n    let language = 'javascript';\n\n    if (typeof node?.properties?.className === 'string') {\n      language = node.properties.className.replace('language-', '');\n    }\n\n    const childrenIsCode =\n      typeof children === 'object' &&\n      children !== null &&\n      'type' in children &&\n      children.type === 'code';\n\n    if (!childrenIsCode) {\n      return <pre>{children}</pre>;\n    }\n\n    const data: CodeBlockProps['data'] = [\n      {\n        language,\n        filename: 'index.js',\n        code: (children.props as { children: string }).children,\n      },\n    ];\n\n    return (\n      <CodeBlock\n        className={cn('my-4 h-auto', className)}\n        data={data}\n        defaultValue={data[0].language}\n      >\n        <CodeBlockHeader>\n          <CodeBlockFiles>\n            {(item) => (\n              <CodeBlockFilename key={item.language} value={item.language}>\n                {item.filename}\n              </CodeBlockFilename>\n            )}\n          </CodeBlockFiles>\n          <CodeBlockSelect>\n            <CodeBlockSelectTrigger>\n              <CodeBlockSelectValue />\n            </CodeBlockSelectTrigger>\n            <CodeBlockSelectContent>\n              {(item) => (\n                <CodeBlockSelectItem key={item.language} value={item.language}>\n                  {item.language}\n                </CodeBlockSelectItem>\n              )}\n            </CodeBlockSelectContent>\n          </CodeBlockSelect>\n          <CodeBlockCopyButton\n            onCopy={() => console.log('Copied code to clipboard')}\n            onError={() => console.error('Failed to copy code to clipboard')}\n          />\n        </CodeBlockHeader>\n        <CodeBlockBody>\n          {(item) => (\n            <CodeBlockItem key={item.language} value={item.language}>\n              <CodeBlockContent language={item.language as BundledLanguage}>\n                {item.code}\n              </CodeBlockContent>\n            </CodeBlockItem>\n          )}\n        </CodeBlockBody>\n      </CodeBlock>\n    );\n  },\n};\n\nexport const AIResponse = memo(\n  ({ className, options, children, ...props }: AIResponseProps) => (\n    <div\n      className={cn(\n        'size-full [&>*:first-child]:mt-0 [&>*:last-child]:mb-0',\n        className\n      )}\n      {...props}\n    >\n      <ReactMarkdown\n        components={components}\n        rehypePlugins={[rehypeKatex]}\n        remarkPlugins={[remarkGfm, remarkMath]}\n        {...options}\n      >\n        {children}\n      </ReactMarkdown>\n    </div>\n  ),\n  (prevProps, nextProps) => prevProps.children === nextProps.children\n);\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-server",
      "type": "registry:ui",
      "description": "AI server component utilities",
      "files": [
        {
          "path": "packages/ai/server.tsx",
          "content": "import type { AIResponseProps } from './response';\n\nexport function AIResponse({\n  className,\n  options,\n  children,\n  ...props\n}: AIResponseProps) {\n  return (\n    <div className={className} {...props}>\n      {children}\n    </div>\n  );\n}",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-simple",
      "type": "registry:ui",
      "description": "Simple AI component for basic interactions",
      "files": [
        {
          "path": "packages/ai/simple.tsx",
          "content": "'use client';\n\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport { Card } from '@repo/shadcn-ui/components/ui/card';\n\nexport interface SimpleAIProps {\n  children?: React.ReactNode;\n}\n\nexport function SimpleAI({ children }: SimpleAIProps) {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">AI Component</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          This is a simple AI component for demonstration.\n        </p>\n        {children}\n        <Button>AI Action</Button>\n      </div>\n    </Card>\n  );\n}\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-source",
      "type": "registry:ui",
      "description": "AI source attribution component",
      "files": [
        {
          "path": "packages/ai/source.tsx",
          "content": "'use client';\n\nimport { BookIcon, ChevronDownIcon } from 'lucide-react';\nimport type { ComponentProps } from 'react';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@repo/shadcn-ui/components/ui/collapsible';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type AISourcesProps = ComponentProps<'div'>;\n\nexport const AISources = ({ className, ...props }: AISourcesProps) => (\n  <Collapsible\n    className={cn('not-prose mb-4 text-primary text-xs', className)}\n    {...props}\n  />\n);\n\nexport type AISourcesTriggerProps = ComponentProps<\n  typeof CollapsibleTrigger\n> & {\n  count: number;\n};\n\nexport const AISourcesTrigger = ({\n  className,\n  count,\n  children,\n  ...props\n}: AISourcesTriggerProps) => (\n  <CollapsibleTrigger className=\"flex items-center gap-2\" {...props}>\n    {children ?? (\n      <>\n        <p className=\"font-medium\">Used {count} sources</p>\n        <ChevronDownIcon className=\"h-4 w-4\" />\n      </>\n    )}\n  </CollapsibleTrigger>\n);\n\nexport type AISourcesContentProps = ComponentProps<typeof CollapsibleContent>;\n\nexport const AISourcesContent = ({\n  className,\n  ...props\n}: AISourcesContentProps) => (\n  <CollapsibleContent\n    className={cn('mt-3 flex flex-col gap-2', className)}\n    {...props}\n  />\n);\n\nexport type AISourceProps = ComponentProps<'a'>;\n\nexport const AISource = ({\n  href,\n  title,\n  children,\n  ...props\n}: AISourceProps) => (\n  <a\n    className=\"flex items-center gap-2\"\n    href={href}\n    rel=\"noreferrer\"\n    target=\"_blank\"\n    {...props}\n  >\n    {children ?? (\n      <>\n        <BookIcon className=\"h-4 w-4\" />\n        <span className=\"block font-medium\">{title}</span>\n      </>\n    )}\n  </a>\n);\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-suggestion",
      "type": "registry:ui",
      "description": "AI suggestion component for prompts and recommendations",
      "files": [
        {
          "path": "packages/ai/suggestion.tsx",
          "content": "'use client';\n\nimport type { ComponentProps } from 'react';\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport { ScrollArea, ScrollBar } from '@repo/shadcn-ui/components/ui/scroll-area';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type AISuggestionsProps = ComponentProps<typeof ScrollArea>;\n\nexport const AISuggestions = ({\n  className,\n  children,\n  ...props\n}: AISuggestionsProps) => (\n  <ScrollArea className=\"w-full overflow-x-auto whitespace-nowrap\" {...props}>\n    <div className={cn('flex w-max flex-nowrap items-center gap-2', className)}>\n      {children}\n    </div>\n    <ScrollBar className=\"hidden\" orientation=\"horizontal\" />\n  </ScrollArea>\n);\n\nexport type AISuggestionProps = Omit<\n  ComponentProps<typeof Button>,\n  'onClick'\n> & {\n  suggestion: string;\n  onClick?: (suggestion: string) => void;\n};\n\nexport const AISuggestion = ({\n  suggestion,\n  onClick,\n  className,\n  variant = 'outline',\n  size = 'sm',\n  children,\n  ...props\n}: AISuggestionProps) => {\n  const handleClick = () => {\n    onClick?.(suggestion);\n  };\n\n  return (\n    <Button\n      className={cn('cursor-pointer rounded-full px-4', className)}\n      onClick={handleClick}\n      size={size}\n      type=\"button\"\n      variant={variant}\n      {...props}\n    >\n      {children || suggestion}\n    </Button>\n  );\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ai-tool",
      "type": "registry:ui",
      "description": "AI tool component for function calling interfaces",
      "files": [
        {
          "path": "packages/ai/tool.tsx",
          "content": "'use client';\n\nimport {\n  CheckCircleIcon,\n  ChevronDownIcon,\n  CircleIcon,\n  ClockIcon,\n  WrenchIcon,\n  XCircleIcon,\n} from 'lucide-react';\nimport type { ComponentProps, ReactNode } from 'react';\nimport { Badge } from '@repo/shadcn-ui/components/ui/badge';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@repo/shadcn-ui/components/ui/collapsible';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type AIToolStatus = 'pending' | 'running' | 'completed' | 'error';\n\nexport type AIToolProps = ComponentProps<typeof Collapsible> & {\n  status?: AIToolStatus;\n};\n\nexport const AITool = ({\n  className,\n  status = 'pending',\n  ...props\n}: AIToolProps) => (\n  <Collapsible\n    className={cn('not-prose mb-4 w-full rounded-md border', className)}\n    {...props}\n  />\n);\n\nexport type AIToolHeaderProps = ComponentProps<typeof CollapsibleTrigger> & {\n  status?: AIToolStatus;\n  name: string;\n  description?: string;\n};\n\nconst getStatusBadge = (status: AIToolStatus) => {\n  const labels = {\n    pending: 'Pending',\n    running: 'Running',\n    completed: 'Completed',\n    error: 'Error',\n  } as const;\n\n  const icons = {\n    pending: <CircleIcon className=\"size-4\" />,\n    running: <ClockIcon className=\"size-4 animate-pulse\" />,\n    completed: <CheckCircleIcon className=\"size-4 text-green-600\" />,\n    error: <XCircleIcon className=\"size-4 text-red-600\" />,\n  } as const;\n\n  return (\n    <Badge className=\"rounded-full text-xs\" variant=\"secondary\">\n      {icons[status]}\n      {labels[status]}\n    </Badge>\n  );\n};\n\nexport const AIToolHeader = ({\n  className,\n  status = 'pending',\n  name,\n  description,\n  ...props\n}: AIToolHeaderProps) => (\n  <CollapsibleTrigger\n    className={cn(\n      'flex w-full items-center justify-between gap-4 p-3',\n      className\n    )}\n    {...props}\n  >\n    <div className=\"flex items-center gap-2\">\n      <WrenchIcon className=\"size-4 text-muted-foreground\" />\n      <span className=\"font-medium text-sm\">{name}</span>\n      {getStatusBadge(status)}\n    </div>\n    <ChevronDownIcon className=\"size-4 text-muted-foreground transition-transform group-data-[state=open]:rotate-180\" />\n  </CollapsibleTrigger>\n);\n\nexport type AIToolContentProps = ComponentProps<typeof CollapsibleContent>;\n\nexport const AIToolContent = ({ className, ...props }: AIToolContentProps) => (\n  <CollapsibleContent\n    className={cn('grid gap-4 overflow-hidden border-t p-4 text-sm', className)}\n    {...props}\n  />\n);\n\nexport type AIToolParametersProps = ComponentProps<'div'> & {\n  parameters: Record<string, unknown>;\n};\n\nexport const AIToolParameters = ({\n  className,\n  parameters,\n  ...props\n}: AIToolParametersProps) => (\n  <div className={cn('space-y-2', className)} {...props}>\n    <h4 className=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\">\n      Parameters\n    </h4>\n    <div className=\"rounded-md bg-muted/50 p-3\">\n      <pre className=\"overflow-x-auto text-muted-foreground text-xs\">\n        {JSON.stringify(parameters, null, 2)}\n      </pre>\n    </div>\n  </div>\n);\n\nexport type AIToolResultProps = ComponentProps<'div'> & {\n  result?: ReactNode;\n  error?: string;\n};\n\nexport const AIToolResult = ({\n  className,\n  result,\n  error,\n  ...props\n}: AIToolResultProps) => {\n  if (!(result || error)) {\n    return null;\n  }\n\n  return (\n    <div className={cn('space-y-2', className)} {...props}>\n      <h4 className=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\">\n        {error ? 'Error' : 'Result'}\n      </h4>\n      <div\n        className={cn(\n          'overflow-x-auto rounded-md p-3 text-xs',\n          error\n            ? 'bg-destructive/10 text-destructive'\n            : 'bg-muted/50 text-foreground'\n        )}\n      >\n        {error ? <div>{error}</div> : <div>{result}</div>}\n      </div>\n    </div>\n  );\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "code-block",
      "type": "registry:ui",
      "description": "Enhanced code block component with syntax highlighting",
      "files": [
        {
          "path": "packages/code-block/index.tsx",
          "content": "'use client';\n\nimport {\n  type IconType,\n  SiAstro,\n  SiBiome,\n  SiBower,\n  SiBun,\n  SiC,\n  SiCircleci,\n  SiCoffeescript,\n  SiCplusplus,\n  SiCss,\n  SiCssmodules,\n  SiDart,\n  SiDocker,\n  SiDocusaurus,\n  SiDotenv,\n  SiEditorconfig,\n  SiEslint,\n  SiGatsby,\n  SiGitignoredotio,\n  SiGnubash,\n  SiGo,\n  SiGraphql,\n  SiGrunt,\n  SiGulp,\n  SiHandlebarsdotjs,\n  SiHtml5,\n  SiJavascript,\n  SiJest,\n  SiJson,\n  SiLess,\n  SiMarkdown,\n  SiMdx,\n  SiMintlify,\n  SiMocha,\n  SiMysql,\n  SiNextdotjs,\n  SiPerl,\n  SiPhp,\n  SiPostcss,\n  SiPrettier,\n  SiPrisma,\n  SiPug,\n  SiPython,\n  SiR,\n  SiReact,\n  SiReadme,\n  SiRedis,\n  SiRemix,\n  SiRive,\n  SiRollupdotjs,\n  SiRuby,\n  SiSanity,\n  SiSass,\n  SiScala,\n  SiSentry,\n  SiShadcnui,\n  SiStorybook,\n  SiStylelint,\n  SiSublimetext,\n  SiSvelte,\n  SiSvg,\n  SiSwift,\n  SiTailwindcss,\n  SiToml,\n  SiTypescript,\n  SiVercel,\n  SiVite,\n  SiVuedotjs,\n  SiWebassembly,\n} from '@icons-pack/react-simple-icons';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport {\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n} from '@shikijs/transformers';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport {\n  cloneElement,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  type BundledLanguage,\n  type CodeOptionsMultipleThemes,\n  codeToHtml,\n} from 'shiki';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type { BundledLanguage } from 'shiki';\n\nconst filenameIconMap = {\n  '.env': SiDotenv,\n  '*.astro': SiAstro,\n  'biome.json': SiBiome,\n  '.bowerrc': SiBower,\n  'bun.lockb': SiBun,\n  '*.c': SiC,\n  '*.cpp': SiCplusplus,\n  '.circleci/config.yml': SiCircleci,\n  '*.coffee': SiCoffeescript,\n  '*.module.css': SiCssmodules,\n  '*.css': SiCss,\n  '*.dart': SiDart,\n  Dockerfile: SiDocker,\n  'docusaurus.config.js': SiDocusaurus,\n  '.editorconfig': SiEditorconfig,\n  '.eslintrc': SiEslint,\n  'eslint.config.*': SiEslint,\n  'gatsby-config.*': SiGatsby,\n  '.gitignore': SiGitignoredotio,\n  '*.go': SiGo,\n  '*.graphql': SiGraphql,\n  '*.sh': SiGnubash,\n  'Gruntfile.*': SiGrunt,\n  'gulpfile.*': SiGulp,\n  '*.hbs': SiHandlebarsdotjs,\n  '*.html': SiHtml5,\n  '*.js': SiJavascript,\n  '*.json': SiJson,\n  '*.test.js': SiJest,\n  '*.less': SiLess,\n  '*.md': SiMarkdown,\n  '*.mdx': SiMdx,\n  'mintlify.json': SiMintlify,\n  'mocha.opts': SiMocha,\n  '*.mustache': SiHandlebarsdotjs,\n  '*.sql': SiMysql,\n  'next.config.*': SiNextdotjs,\n  '*.pl': SiPerl,\n  '*.php': SiPhp,\n  'postcss.config.*': SiPostcss,\n  'prettier.config.*': SiPrettier,\n  '*.prisma': SiPrisma,\n  '*.pug': SiPug,\n  '*.py': SiPython,\n  '*.r': SiR,\n  '*.rb': SiRuby,\n  '*.jsx': SiReact,\n  '*.tsx': SiReact,\n  'readme.md': SiReadme,\n  '*.rdb': SiRedis,\n  'remix.config.*': SiRemix,\n  '*.riv': SiRive,\n  'rollup.config.*': SiRollupdotjs,\n  'sanity.config.*': SiSanity,\n  '*.sass': SiSass,\n  '*.scss': SiSass,\n  '*.sc': SiScala,\n  '*.scala': SiScala,\n  'sentry.client.config.*': SiSentry,\n  'components.json': SiShadcnui,\n  'storybook.config.*': SiStorybook,\n  'stylelint.config.*': SiStylelint,\n  '.sublime-settings': SiSublimetext,\n  '*.svelte': SiSvelte,\n  '*.svg': SiSvg,\n  '*.swift': SiSwift,\n  'tailwind.config.*': SiTailwindcss,\n  '*.toml': SiToml,\n  '*.ts': SiTypescript,\n  'vercel.json': SiVercel,\n  'vite.config.*': SiVite,\n  '*.vue': SiVuedotjs,\n  '*.wasm': SiWebassembly,\n};\n\nconst lineNumberClassNames = cn(\n  '[&_code]:[counter-reset:line]',\n  '[&_code]:[counter-increment:line_0]',\n  '[&_.line]:before:content-[counter(line)]',\n  '[&_.line]:before:inline-block',\n  '[&_.line]:before:[counter-increment:line]',\n  '[&_.line]:before:w-4',\n  '[&_.line]:before:mr-4',\n  '[&_.line]:before:text-[13px]',\n  '[&_.line]:before:text-right',\n  '[&_.line]:before:text-muted-foreground/50',\n  '[&_.line]:before:font-mono',\n  '[&_.line]:before:select-none'\n);\n\nconst darkModeClassNames = cn(\n  'dark:[&_.shiki]:!text-[var(--shiki-dark)]',\n  'dark:[&_.shiki]:!bg-[var(--shiki-dark-bg)]',\n  'dark:[&_.shiki]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki]:![text-decoration:var(--shiki-dark-text-decoration)]',\n  'dark:[&_.shiki_span]:!text-[var(--shiki-dark)]',\n  'dark:[&_.shiki_span]:![font-style:var(--shiki-dark-font-style)]',\n  'dark:[&_.shiki_span]:![font-weight:var(--shiki-dark-font-weight)]',\n  'dark:[&_.shiki_span]:![text-decoration:var(--shiki-dark-text-decoration)]'\n);\n\nconst lineHighlightClassNames = cn(\n  '[&_.line.highlighted]:bg-blue-50',\n  '[&_.line.highlighted]:after:bg-blue-500',\n  '[&_.line.highlighted]:after:absolute',\n  '[&_.line.highlighted]:after:left-0',\n  '[&_.line.highlighted]:after:top-0',\n  '[&_.line.highlighted]:after:bottom-0',\n  '[&_.line.highlighted]:after:w-0.5',\n  'dark:[&_.line.highlighted]:!bg-blue-500/10'\n);\n\nconst lineDiffClassNames = cn(\n  '[&_.line.diff]:after:absolute',\n  '[&_.line.diff]:after:left-0',\n  '[&_.line.diff]:after:top-0',\n  '[&_.line.diff]:after:bottom-0',\n  '[&_.line.diff]:after:w-0.5',\n  '[&_.line.diff.add]:bg-emerald-50',\n  '[&_.line.diff.add]:after:bg-emerald-500',\n  '[&_.line.diff.remove]:bg-rose-50',\n  '[&_.line.diff.remove]:after:bg-rose-500',\n  'dark:[&_.line.diff.add]:!bg-emerald-500/10',\n  'dark:[&_.line.diff.remove]:!bg-rose-500/10'\n);\n\nconst lineFocusedClassNames = cn(\n  '[&_code:has(.focused)_.line]:blur-[2px]',\n  '[&_code:has(.focused)_.line.focused]:blur-none'\n);\n\nconst wordHighlightClassNames = cn(\n  '[&_.highlighted-word]:bg-blue-50',\n  'dark:[&_.highlighted-word]:!bg-blue-500/10'\n);\n\nconst codeBlockClassName = cn(\n  'mt-0 bg-background text-sm',\n  '[&_pre]:py-4',\n  '[&_.shiki]:!bg-[var(--shiki-bg)]',\n  '[&_code]:w-full',\n  '[&_code]:grid',\n  '[&_code]:overflow-x-auto',\n  '[&_code]:bg-transparent',\n  '[&_.line]:px-4',\n  '[&_.line]:w-full',\n  '[&_.line]:relative'\n);\n\nconst highlight = (\n  html: string,\n  language?: BundledLanguage,\n  themes?: CodeOptionsMultipleThemes['themes']\n) =>\n  codeToHtml(html, {\n    lang: language ?? 'typescript',\n    themes: themes ?? {\n      light: 'github-light',\n      dark: 'github-dark-default',\n    },\n    transformers: [\n      transformerNotationDiff({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationWordHighlight({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationFocus({\n        matchAlgorithm: 'v3',\n      }),\n      transformerNotationErrorLevel({\n        matchAlgorithm: 'v3',\n      }),\n    ],\n  });\n\ntype CodeBlockData = {\n  language: string;\n  filename: string;\n  code: string;\n};\n\ntype CodeBlockContextType = {\n  value: string | undefined;\n  onValueChange: ((value: string) => void) | undefined;\n  data: CodeBlockData[];\n};\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  value: undefined,\n  onValueChange: undefined,\n  data: [],\n});\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  data: CodeBlockData[];\n};\n\nexport const CodeBlock = ({\n  value: controlledValue,\n  onValueChange: controlledOnValueChange,\n  defaultValue,\n  className,\n  data,\n  ...props\n}: CodeBlockProps) => {\n  const [value, onValueChange] = useControllableState({\n    defaultProp: defaultValue ?? '',\n    prop: controlledValue,\n    onChange: controlledOnValueChange,\n  });\n\n  return (\n    <CodeBlockContext.Provider value={{ value, onValueChange, data }}>\n      <div\n        className={cn('size-full overflow-hidden rounded-md border', className)}\n        {...props}\n      />\n    </CodeBlockContext.Provider>\n  );\n};\n\nexport type CodeBlockHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const CodeBlockHeader = ({\n  className,\n  ...props\n}: CodeBlockHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center border-b bg-secondary p-1',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockFilesProps = Omit<\n  HTMLAttributes<HTMLDivElement>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockFiles = ({\n  className,\n  children,\n  ...props\n}: CodeBlockFilesProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return (\n    <div\n      className={cn('flex grow flex-row items-center gap-2', className)}\n      {...props}\n    >\n      {data.map(children)}\n    </div>\n  );\n};\n\nexport type CodeBlockFilenameProps = HTMLAttributes<HTMLDivElement> & {\n  icon?: IconType;\n  value?: string;\n};\n\nexport const CodeBlockFilename = ({\n  className,\n  icon,\n  value,\n  children,\n  ...props\n}: CodeBlockFilenameProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n  const defaultIcon = Object.entries(filenameIconMap).find(([pattern]) => {\n    const regex = new RegExp(\n      `^${pattern.replace(/\\\\/g, '\\\\\\\\').replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')}$`\n    );\n    return regex.test(children as string);\n  })?.[1];\n  const Icon = icon ?? defaultIcon;\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"flex items-center gap-2 bg-secondary px-4 py-1.5 text-muted-foreground text-xs\"\n      {...props}\n    >\n      {Icon && <Icon className=\"h-4 w-4 shrink-0\" />}\n      <span className=\"flex-1 truncate\">{children}</span>\n    </div>\n  );\n};\n\nexport type CodeBlockSelectProps = ComponentProps<typeof Select>;\n\nexport const CodeBlockSelect = (props: CodeBlockSelectProps) => {\n  const { value, onValueChange } = useContext(CodeBlockContext);\n\n  return <Select onValueChange={onValueChange} value={value} {...props} />;\n};\n\nexport type CodeBlockSelectTriggerProps = ComponentProps<typeof SelectTrigger>;\n\nexport const CodeBlockSelectTrigger = ({\n  className,\n  ...props\n}: CodeBlockSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'w-fit border-none text-muted-foreground text-xs shadow-none',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type CodeBlockSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const CodeBlockSelectValue = (props: CodeBlockSelectValueProps) => (\n  <SelectValue {...props} />\n);\n\nexport type CodeBlockSelectContentProps = Omit<\n  ComponentProps<typeof SelectContent>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockSelectContent = ({\n  children,\n  ...props\n}: CodeBlockSelectContentProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return <SelectContent {...props}>{data.map(children)}</SelectContent>;\n};\n\nexport type CodeBlockSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const CodeBlockSelectItem = ({\n  className,\n  ...props\n}: CodeBlockSelectItemProps) => (\n  <SelectItem className={cn('text-sm', className)} {...props} />\n);\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  asChild,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const { data, value } = useContext(CodeBlockContext);\n  const code = data.find((item) => item.language === value)?.code;\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !code\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(code).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <Button\n      className={cn('shrink-0', className)}\n      onClick={copyToClipboard}\n      size=\"icon\"\n      variant=\"ghost\"\n      {...props}\n    >\n      {children ?? <Icon className=\"text-muted-foreground\" size={14} />}\n    </Button>\n  );\n};\n\ntype CodeBlockFallbackProps = HTMLAttributes<HTMLDivElement>;\n\nconst CodeBlockFallback = ({ children, ...props }: CodeBlockFallbackProps) => (\n  <div {...props}>\n    <pre className=\"w-full\">\n      <code>\n        {children\n          ?.toString()\n          .split('\\n')\n          .map((line, i) => (\n            <span className=\"line\" key={i}>\n              {line}\n            </span>\n          ))}\n      </code>\n    </pre>\n  </div>\n);\n\nexport type CodeBlockBodyProps = Omit<\n  HTMLAttributes<HTMLDivElement>,\n  'children'\n> & {\n  children: (item: CodeBlockData) => ReactNode;\n};\n\nexport const CodeBlockBody = ({ children, ...props }: CodeBlockBodyProps) => {\n  const { data } = useContext(CodeBlockContext);\n\n  return <div {...props}>{data.map(children)}</div>;\n};\n\nexport type CodeBlockItemProps = HTMLAttributes<HTMLDivElement> & {\n  value: string;\n  lineNumbers?: boolean;\n};\n\nexport const CodeBlockItem = ({\n  children,\n  lineNumbers = true,\n  className,\n  value,\n  ...props\n}: CodeBlockItemProps) => {\n  const { value: activeValue } = useContext(CodeBlockContext);\n\n  if (value !== activeValue) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        codeBlockClassName,\n        lineHighlightClassNames,\n        lineDiffClassNames,\n        lineFocusedClassNames,\n        wordHighlightClassNames,\n        darkModeClassNames,\n        lineNumbers && lineNumberClassNames,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport type CodeBlockContentProps = HTMLAttributes<HTMLDivElement> & {\n  themes?: CodeOptionsMultipleThemes['themes'];\n  language?: BundledLanguage;\n  syntaxHighlighting?: boolean;\n  children: string;\n};\n\nexport const CodeBlockContent = ({\n  children,\n  themes,\n  language,\n  syntaxHighlighting = true,\n  ...props\n}: CodeBlockContentProps) => {\n  const [html, setHtml] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!syntaxHighlighting) {\n      return;\n    }\n\n    highlight(children as string, language, themes)\n      .then(setHtml)\n      // biome-ignore lint/suspicious/noConsole: \"it's fine\"\n      .catch(console.error);\n  }, [children, themes, syntaxHighlighting, language]);\n\n  if (!(syntaxHighlighting && html)) {\n    return <CodeBlockFallback>{children}</CodeBlockFallback>;\n  }\n\n  return (\n    <div\n      // biome-ignore lint/security/noDangerouslySetInnerHtml: \"Kinda how Shiki works\"\n      dangerouslySetInnerHTML={{ __html: html }}\n      {...props}\n    />\n  );\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "editor",
      "type": "registry:ui",
      "description": "Code editor component",
      "files": [
        {
          "path": "packages/editor/index.tsx",
          "content": "'use client';\n\nimport type { Editor, Range } from '@tiptap/core';\nimport { mergeAttributes, Node } from '@tiptap/core';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport CodeBlockLowlight from '@tiptap/extension-code-block-lowlight';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Subscript from '@tiptap/extension-subscript';\nimport Superscript from '@tiptap/extension-superscript';\nimport { Table } from '@tiptap/extension-table';\nimport { TableCell } from '@tiptap/extension-table-cell';\nimport { TableHeader } from '@tiptap/extension-table-header';\nimport { TableRow } from '@tiptap/extension-table-row';\nimport { TaskItem } from '@tiptap/extension-task-item';\nimport { TaskList } from '@tiptap/extension-task-list';\nimport { TextStyle } from '@tiptap/extension-text-style';\nimport Typography from '@tiptap/extension-typography';\nimport type { DOMOutputSpec, Node as ProseMirrorNode } from '@tiptap/pm/model';\nimport { PluginKey } from '@tiptap/pm/state';\nimport {\n  ReactRenderer,\n  EditorProvider as TiptapEditorProvider,\n  type EditorProviderProps as TiptapEditorProviderProps,\n  useCurrentEditor,\n} from '@tiptap/react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type { Editor, JSONContent } from '@tiptap/react';\n\nimport StarterKit from '@tiptap/starter-kit';\nimport Suggestion, { type SuggestionOptions } from '@tiptap/suggestion';\nimport Fuse from 'fuse.js';\nimport { all, createLowlight } from 'lowlight';\nimport {\n  ArrowDownIcon,\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  ArrowUpIcon,\n  BoldIcon,\n  BoltIcon,\n  CheckIcon,\n  CheckSquareIcon,\n  ChevronDownIcon,\n  CodeIcon,\n  ColumnsIcon,\n  EllipsisIcon,\n  EllipsisVerticalIcon,\n  ExternalLinkIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  ItalicIcon,\n  ListIcon,\n  ListOrderedIcon,\n  type LucideIcon,\n  type LucideProps,\n  RemoveFormattingIcon,\n  RowsIcon,\n  StrikethroughIcon,\n  SubscriptIcon,\n  SuperscriptIcon,\n  TableCellsMergeIcon,\n  TableColumnsSplitIcon,\n  TableIcon,\n  TextIcon,\n  TextQuoteIcon,\n  TrashIcon,\n  UnderlineIcon,\n} from 'lucide-react';\nimport type { FormEventHandler, HTMLAttributes, ReactNode } from 'react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport tippy, { type Instance as TippyInstance } from 'tippy.js';\n\ninterface SlashNodeAttrs {\n  id: string | null;\n  label?: string | null;\n}\n\ntype SlashOptions<\n  SlashOptionSuggestionItem = unknown,\n  Attrs = SlashNodeAttrs,\n> = {\n  HTMLAttributes: Record<string, unknown>;\n  renderText: (props: {\n    options: SlashOptions<SlashOptionSuggestionItem, Attrs>;\n    node: ProseMirrorNode;\n  }) => string;\n  renderHTML: (props: {\n    options: SlashOptions<SlashOptionSuggestionItem, Attrs>;\n    node: ProseMirrorNode;\n  }) => DOMOutputSpec;\n  deleteTriggerWithBackspace: boolean;\n  suggestion: Omit<\n    SuggestionOptions<SlashOptionSuggestionItem, Attrs>,\n    'editor'\n  >;\n};\n\nconst SlashPluginKey = new PluginKey('slash');\n\nexport interface SuggestionItem {\n  title: string;\n  description: string;\n  icon: LucideIcon;\n  searchTerms: string[];\n  command: (props: { editor: Editor; range: Range }) => void;\n}\n\nexport const defaultSlashSuggestions: SuggestionOptions<SuggestionItem>['items'] =\n  () => [\n    {\n      title: 'Text',\n      description: 'Just start typing with plain text.',\n      searchTerms: ['p', 'paragraph'],\n      icon: TextIcon,\n      command: ({ editor, range }) => {\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .toggleNode('paragraph', 'paragraph')\n          .run();\n      },\n    },\n    {\n      title: 'To-do List',\n      description: 'Track tasks with a to-do list.',\n      searchTerms: ['todo', 'task', 'list', 'check', 'checkbox'],\n      icon: CheckSquareIcon,\n      command: ({ editor, range }) => {\n        editor.chain().focus().deleteRange(range).toggleTaskList().run();\n      },\n    },\n    {\n      title: 'Heading 1',\n      description: 'Big section heading.',\n      searchTerms: ['title', 'big', 'large'],\n      icon: Heading1Icon,\n      command: ({ editor, range }) => {\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .setNode('heading', { level: 1 })\n          .run();\n      },\n    },\n    {\n      title: 'Heading 2',\n      description: 'Medium section heading.',\n      searchTerms: ['subtitle', 'medium'],\n      icon: Heading2Icon,\n      command: ({ editor, range }) => {\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .setNode('heading', { level: 2 })\n          .run();\n      },\n    },\n    {\n      title: 'Heading 3',\n      description: 'Small section heading.',\n      searchTerms: ['subtitle', 'small'],\n      icon: Heading3Icon,\n      command: ({ editor, range }) => {\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .setNode('heading', { level: 3 })\n          .run();\n      },\n    },\n    {\n      title: 'Bullet List',\n      description: 'Create a simple bullet list.',\n      searchTerms: ['unordered', 'point'],\n      icon: ListIcon,\n      command: ({ editor, range }) => {\n        editor.chain().focus().deleteRange(range).toggleBulletList().run();\n      },\n    },\n    {\n      title: 'Numbered List',\n      description: 'Create a list with numbering.',\n      searchTerms: ['ordered'],\n      icon: ListOrderedIcon,\n      command: ({ editor, range }) => {\n        editor.chain().focus().deleteRange(range).toggleOrderedList().run();\n      },\n    },\n    {\n      title: 'Quote',\n      description: 'Capture a quote.',\n      searchTerms: ['blockquote'],\n      icon: TextQuoteIcon,\n      command: ({ editor, range }) =>\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .toggleNode('paragraph', 'paragraph')\n          .toggleBlockquote()\n          .run(),\n    },\n    {\n      title: 'Code',\n      description: 'Capture a code snippet.',\n      searchTerms: ['codeblock'],\n      icon: CodeIcon,\n      command: ({ editor, range }) =>\n        editor.chain().focus().deleteRange(range).toggleCodeBlock().run(),\n    },\n    {\n      title: 'Table',\n      description: 'Add a table view to organize data.',\n      searchTerms: ['table'],\n      icon: TableIcon,\n      command: ({ editor, range }) =>\n        editor\n          .chain()\n          .focus()\n          .deleteRange(range)\n          .insertTable({ rows: 3, cols: 3, withHeaderRow: true })\n          .run(),\n    },\n  ];\n\nconst Slash = Node.create<SlashOptions>({\n  name: 'slash',\n  priority: 101,\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      renderText({ options, node }) {\n        return `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`;\n      },\n      deleteTriggerWithBackspace: false,\n      renderHTML({ options, node }) {\n        return [\n          'span',\n          mergeAttributes(this.HTMLAttributes, options.HTMLAttributes),\n          `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`,\n        ];\n      },\n      suggestion: {\n        char: '/',\n        pluginKey: SlashPluginKey,\n        command: ({ editor, range, props }) => {\n          // increase range.to by one when the next node is of type \"text\"\n          // and starts with a space character\n          const nodeAfter = editor.view.state.selection.$to.nodeAfter;\n          const overrideSpace = nodeAfter?.text?.startsWith(' ');\n\n          if (overrideSpace) {\n            range.to += 1;\n          }\n\n          editor\n            .chain()\n            .focus()\n            .insertContentAt(range, [\n              {\n                type: this.name,\n                attrs: props,\n              },\n              {\n                type: 'text',\n                text: ' ',\n              },\n            ])\n            .run();\n\n          // get reference to `window` object from editor element, to support cross-frame JS usage\n          editor.view.dom.ownerDocument.defaultView\n            ?.getSelection()\n            ?.collapseToEnd();\n        },\n        allow: ({ state, range }) => {\n          const $from = state.doc.resolve(range.from);\n          const type = state.schema.nodes[this.name];\n          const allow = !!$from.parent.type.contentMatch.matchType(type);\n\n          return allow;\n        },\n      },\n    };\n  },\n\n  group: 'inline',\n\n  inline: true,\n\n  selectable: false,\n\n  atom: true,\n\n  addAttributes() {\n    return {\n      id: {\n        default: null,\n        parseHTML: (element) => element.getAttribute('data-id'),\n        renderHTML: (attributes) => {\n          if (!attributes.id) {\n            return {};\n          }\n\n          return {\n            'data-id': attributes.id,\n          };\n        },\n      },\n\n      label: {\n        default: null,\n        parseHTML: (element) => element.getAttribute('data-label'),\n        renderHTML: (attributes) => {\n          if (!attributes.label) {\n            return {};\n          }\n\n          return {\n            'data-label': attributes.label,\n          };\n        },\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `span[data-type=\"${this.name}\"]`,\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const mergedOptions = { ...this.options };\n\n    mergedOptions.HTMLAttributes = mergeAttributes(\n      { 'data-type': this.name },\n      this.options.HTMLAttributes,\n      HTMLAttributes\n    );\n    const html = this.options.renderHTML({\n      options: mergedOptions,\n      node,\n    });\n\n    if (typeof html === 'string') {\n      return [\n        'span',\n        mergeAttributes(\n          { 'data-type': this.name },\n          this.options.HTMLAttributes,\n          HTMLAttributes\n        ),\n        html,\n      ];\n    }\n    return html;\n  },\n\n  renderText({ node }) {\n    return this.options.renderText({\n      options: this.options,\n      node,\n    });\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () =>\n        this.editor.commands.command(({ tr, state }) => {\n          let isMention = false;\n          const { selection } = state;\n          const { empty, anchor } = selection;\n\n          if (!empty) {\n            return false;\n          }\n\n          state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\n            if (node.type.name === this.name) {\n              isMention = true;\n              tr.insertText(\n                this.options.deleteTriggerWithBackspace\n                  ? ''\n                  : this.options.suggestion.char || '',\n                pos,\n                pos + node.nodeSize\n              );\n\n              return false;\n            }\n          });\n\n          return isMention;\n        }),\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      Suggestion({\n        editor: this.editor,\n        ...this.options.suggestion,\n      }),\n    ];\n  },\n});\n\n// Create a lowlight instance with all languages loaded\nconst lowlight = createLowlight(all);\n\ntype EditorSlashMenuProps = {\n  items: SuggestionItem[];\n  command: (item: SuggestionItem) => void;\n  editor: Editor;\n  range: Range;\n};\n\nconst EditorSlashMenu = ({ items, editor, range }: EditorSlashMenuProps) => (\n  <Command\n    className=\"border shadow\"\n    id=\"slash-command\"\n    onKeyDown={(e) => {\n      e.stopPropagation();\n    }}\n  >\n    <CommandEmpty className=\"flex w-full items-center justify-center p-4 text-muted-foreground text-sm\">\n      <p>No results</p>\n    </CommandEmpty>\n    <CommandList>\n      {items.map((item) => (\n        <CommandItem\n          className=\"flex items-center gap-3 pr-3\"\n          key={item.title}\n          onSelect={() => item.command({ editor, range })}\n        >\n          <div className=\"flex size-9 shrink-0 items-center justify-center rounded border bg-secondary\">\n            <item.icon className=\"text-muted-foreground\" size={16} />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"font-medium text-sm\">{item.title}</span>\n            <span className=\"text-muted-foreground text-xs\">\n              {item.description}\n            </span>\n          </div>\n        </CommandItem>\n      ))}\n    </CommandList>\n  </Command>\n);\n\nconst handleCommandNavigation = (event: KeyboardEvent) => {\n  if (['ArrowUp', 'ArrowDown', 'Enter'].includes(event.key)) {\n    const slashCommand = document.querySelector('#slash-command');\n\n    if (slashCommand) {\n      event.preventDefault();\n\n      slashCommand.dispatchEvent(\n        new KeyboardEvent('keydown', {\n          key: event.key,\n          cancelable: true,\n          bubbles: true,\n        })\n      );\n\n      return true;\n    }\n  }\n};\n\nexport type EditorProviderProps = TiptapEditorProviderProps & {\n  className?: string;\n  limit?: number;\n  placeholder?: string;\n};\n\nexport const EditorProvider = ({\n  className,\n  extensions,\n  limit,\n  placeholder,\n  ...props\n}: EditorProviderProps) => {\n  const defaultExtensions = [\n    StarterKit.configure({\n      codeBlock: false,\n      bulletList: {\n        HTMLAttributes: {\n          class: cn('list-outside list-disc pl-4'),\n        },\n      },\n      orderedList: {\n        HTMLAttributes: {\n          class: cn('list-outside list-decimal pl-4'),\n        },\n      },\n      listItem: {\n        HTMLAttributes: {\n          class: cn('leading-normal'),\n        },\n      },\n      blockquote: {\n        HTMLAttributes: {\n          class: cn('border-l border-l-2 pl-2'),\n        },\n      },\n      code: {\n        HTMLAttributes: {\n          class: cn('rounded-md bg-muted px-1.5 py-1 font-medium font-mono'),\n          spellcheck: 'false',\n        },\n      },\n      horizontalRule: {\n        HTMLAttributes: {\n          class: cn('mt-4 mb-6 border-muted-foreground border-t'),\n        },\n      },\n      dropcursor: {\n        color: 'var(--border)',\n        width: 4,\n      },\n    }),\n    Typography,\n    Placeholder.configure({\n      placeholder,\n      emptyEditorClass:\n        'before:text-muted-foreground before:content-[attr(data-placeholder)] before:float-left before:h-0 before:pointer-events-none',\n    }),\n    CharacterCount.configure({\n      limit,\n    }),\n    CodeBlockLowlight.configure({\n      lowlight,\n      HTMLAttributes: {\n        class: cn(\n          'rounded-md border p-4 text-sm',\n          'bg-background text-foreground',\n          '[&_.hljs-doctag]:text-[#d73a49] [&_.hljs-keyword]:text-[#d73a49] [&_.hljs-meta_.hljs-keyword]:text-[#d73a49] [&_.hljs-template-tag]:text-[#d73a49] [&_.hljs-template-variable]:text-[#d73a49] [&_.hljs-type]:text-[#d73a49] [&_.hljs-variable.language_]:text-[#d73a49]',\n          '[&_.hljs-title.class_.inherited__]:text-[#6f42c1] [&_.hljs-title.class_]:text-[#6f42c1] [&_.hljs-title.function_]:text-[#6f42c1] [&_.hljs-title]:text-[#6f42c1]',\n          '[&_.hljs-attr]:text-[#005cc5] [&_.hljs-attribute]:text-[#005cc5] [&_.hljs-literal]:text-[#005cc5] [&_.hljs-meta]:text-[#005cc5] [&_.hljs-number]:text-[#005cc5] [&_.hljs-operator]:text-[#005cc5] [&_.hljs-selector-attr]:text-[#005cc5] [&_.hljs-selector-class]:text-[#005cc5] [&_.hljs-selector-id]:text-[#005cc5] [&_.hljs-variable]:text-[#005cc5]',\n          '[&_.hljs-meta_.hljs-string]:text-[#032f62] [&_.hljs-regexp]:text-[#032f62] [&_.hljs-string]:text-[#032f62]',\n          '[&_.hljs-built_in]:text-[#e36209] [&_.hljs-symbol]:text-[#e36209]',\n          '[&_.hljs-code]:text-[#6a737d] [&_.hljs-comment]:text-[#6a737d] [&_.hljs-formula]:text-[#6a737d]',\n          '[&_.hljs-name]:text-[#22863a] [&_.hljs-quote]:text-[#22863a] [&_.hljs-selector-pseudo]:text-[#22863a] [&_.hljs-selector-tag]:text-[#22863a]',\n          '[&_.hljs-subst]:text-[#24292e]',\n          '[&_.hljs-section]:font-bold [&_.hljs-section]:text-[#005cc5]',\n          '[&_.hljs-bullet]:text-[#735c0f]',\n          '[&_.hljs-emphasis]:text-[#24292e] [&_.hljs-emphasis]:italic',\n          '[&_.hljs-strong]:font-bold [&_.hljs-strong]:text-[#24292e]',\n          '[&_.hljs-addition]:bg-[#f0fff4] [&_.hljs-addition]:text-[#22863a]',\n          '[&_.hljs-deletion]:bg-[#ffeef0] [&_.hljs-deletion]:text-[#b31d28]'\n        ),\n      },\n    }),\n    Superscript,\n    Subscript,\n    Slash.configure({\n      suggestion: {\n        items: async ({ editor, query }) => {\n          const items = await defaultSlashSuggestions({ editor, query });\n\n          if (!query) {\n            return items;\n          }\n\n          const slashFuse = new Fuse(items, {\n            keys: ['title', 'description', 'searchTerms'],\n            threshold: 0.2,\n            minMatchCharLength: 1,\n          });\n\n          const results = slashFuse.search(query);\n\n          return results.map((result) => result.item);\n        },\n        char: '/',\n        render: () => {\n          let component: ReactRenderer<EditorSlashMenuProps>;\n          let popup: TippyInstance;\n\n          return {\n            onStart: (onStartProps) => {\n              component = new ReactRenderer(EditorSlashMenu, {\n                props: onStartProps,\n                editor: onStartProps.editor,\n              });\n\n              popup = tippy(document.body, {\n                getReferenceClientRect: () =>\n                  onStartProps.clientRect?.() || new DOMRect(),\n                appendTo: () => document.body,\n                content: component.element,\n                showOnCreate: true,\n                interactive: true,\n                trigger: 'manual',\n                placement: 'bottom-start',\n              });\n            },\n\n            onUpdate(onUpdateProps) {\n              component.updateProps(onUpdateProps);\n\n              popup.setProps({\n                getReferenceClientRect: () =>\n                  onUpdateProps.clientRect?.() || new DOMRect(),\n              });\n            },\n\n            onKeyDown(onKeyDownProps) {\n              if (onKeyDownProps.event.key === 'Escape') {\n                popup.hide();\n                component.destroy();\n\n                return true;\n              }\n\n              return handleCommandNavigation(onKeyDownProps.event) ?? false;\n            },\n\n            onExit() {\n              popup.destroy();\n              component.destroy();\n            },\n          };\n        },\n      },\n    }),\n    Table.configure({\n      HTMLAttributes: {\n        class: cn(\n          'relative m-0 mx-auto my-3 w-full table-fixed border-collapse overflow-hidden rounded-none text-sm'\n        ),\n      },\n      allowTableNodeSelection: true,\n    }),\n    TableRow.configure({\n      HTMLAttributes: {\n        class: cn(\n          'relative box-border min-w-[1em] border p-1 text-start align-top'\n        ),\n      },\n    }),\n    TableCell.configure({\n      HTMLAttributes: {\n        class: cn(\n          'relative box-border min-w-[1em] border p-1 text-start align-top'\n        ),\n      },\n    }),\n    TableHeader.configure({\n      HTMLAttributes: {\n        class: cn(\n          'relative box-border min-w-[1em] border bg-secondary p-1 text-start align-top font-medium font-semibold text-muted-foreground'\n        ),\n      },\n    }),\n    TaskList.configure({\n      HTMLAttributes: {\n        // 17px = the width of the checkbox + the gap between the checkbox and the text\n        class: 'before:translate-x-[17px]',\n      },\n    }),\n    TaskItem.configure({\n      HTMLAttributes: {\n        class: 'flex items-start gap-1',\n      },\n      nested: true,\n    }),\n    TextStyle.configure({ mergeNestedSpanStyles: true }),\n  ];\n\n  return (\n    <TooltipProvider>\n      <div className={cn(className, '[&_.ProseMirror-focused]:outline-none')}>\n        <TiptapEditorProvider\n          // avoid re-rendering the editor on every keystroke\n          // this is a performance optimization\n          // see https://tiptap.dev/api/components/editor-provider#immediately-render\n          immediatelyRender={false}\n          editorProps={{\n            handleKeyDown: (_view, event) => {\n              handleCommandNavigation(event);\n            },\n          }}\n          extensions={[...defaultExtensions, ...(extensions ?? [])]}\n          {...props}\n        />\n      </div>\n    </TooltipProvider>\n  );\n};\n\nexport type EditorFloatingMenuProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nexport const EditorFloatingMenu = ({\n  className,\n  children,\n}: EditorFloatingMenuProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex items-center bg-secondary', className)}>\n      {children}\n    </div>\n  );\n};\n\nexport type EditorBubbleMenuProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nexport const EditorBubbleMenu = ({\n  className,\n  children,\n}: EditorBubbleMenuProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex rounded-xl border bg-background p-0.5 shadow',\n        '[&>*:first-child]:rounded-l-[9px]',\n        '[&>*:last-child]:rounded-r-[9px]',\n        className\n      )}\n    >\n      {children && Array.isArray(children)\n        ? children.reduce((acc: ReactNode[], child, index) => {\n          if (index === 0) {\n            return [child];\n          }\n\n          // biome-ignore lint/suspicious/noArrayIndexKey: \"only iterator we have\"\n          acc.push(<Separator key={index} orientation=\"vertical\" />);\n          acc.push(child);\n          return acc;\n        }, [])\n        : children}\n    </div>\n  );\n};\n\ntype EditorButtonProps = {\n  name: string;\n  isActive: () => boolean;\n  command: () => void;\n  icon: LucideIcon | ((props: LucideProps) => ReactNode);\n  hideName?: boolean;\n};\n\nconst BubbleMenuButton = ({\n  name,\n  isActive,\n  command,\n  icon: Icon,\n  hideName,\n}: EditorButtonProps) => (\n  <Button\n    className=\"flex gap-4\"\n    onClick={() => command()}\n    size=\"sm\"\n    variant=\"ghost\"\n  >\n    <Icon className=\"shrink-0 text-muted-foreground\" size={12} />\n    {!hideName && <span className=\"flex-1 text-left\">{name}</span>}\n    {isActive() ? (\n      <CheckIcon className=\"shrink-0 text-muted-foreground\" size={12} />\n    ) : null}\n  </Button>\n);\n\nexport type EditorClearFormattingProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorClearFormatting = ({\n  hideName = true,\n}: EditorClearFormattingProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().clearNodes().unsetAllMarks().run()}\n      hideName={hideName}\n      icon={RemoveFormattingIcon}\n      isActive={() => false}\n      name=\"Clear Formatting\"\n    />\n  );\n};\n\nexport type EditorNodeTextProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeText = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() =>\n        editor.chain().focus().toggleNode('paragraph', 'paragraph').run()\n      }\n      hideName={hideName}\n      // I feel like there has to be a more efficient way to do this – feel free to PR if you know how!\n      icon={TextIcon}\n      isActive={() =>\n        (editor &&\n          !editor.isActive('paragraph') &&\n          !editor.isActive('bulletList') &&\n          !editor.isActive('orderedList')) ??\n        false\n      }\n      name=\"Text\"\n    />\n  );\n};\n\nexport type EditorNodeHeading1Props = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeHeading1 = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n      hideName={hideName}\n      icon={Heading1Icon}\n      isActive={() => editor.isActive('heading', { level: 1 }) ?? false}\n      name=\"Heading 1\"\n    />\n  );\n};\n\nexport type EditorNodeHeading2Props = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeHeading2 = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n      hideName={hideName}\n      icon={Heading2Icon}\n      isActive={() => editor.isActive('heading', { level: 2 }) ?? false}\n      name=\"Heading 2\"\n    />\n  );\n};\n\nexport type EditorNodeHeading3Props = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeHeading3 = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n      hideName={hideName}\n      icon={Heading3Icon}\n      isActive={() => editor.isActive('heading', { level: 3 }) ?? false}\n      name=\"Heading 3\"\n    />\n  );\n};\n\nexport type EditorNodeBulletListProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeBulletList = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleBulletList().run()}\n      hideName={hideName}\n      icon={ListIcon}\n      isActive={() => editor.isActive('bulletList') ?? false}\n      name=\"Bullet List\"\n    />\n  );\n};\n\nexport type EditorNodeOrderedListProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeOrderedList = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleOrderedList().run()}\n      hideName={hideName}\n      icon={ListOrderedIcon}\n      isActive={() => editor.isActive('orderedList') ?? false}\n      name=\"Numbered List\"\n    />\n  );\n};\n\nexport type EditorNodeTaskListProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeTaskList = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleTaskList().run()}\n      hideName={hideName}\n      icon={CheckSquareIcon}\n      isActive={() => editor.isActive('taskItem') ?? false}\n      name=\"To-do List\"\n    />\n  );\n};\n\nexport type EditorNodeQuoteProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeQuote = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() =>\n        editor\n          .chain()\n          .focus()\n          .toggleNode('paragraph', 'paragraph')\n          .toggleBlockquote()\n          .run()\n      }\n      hideName={hideName}\n      icon={TextQuoteIcon}\n      isActive={() => editor.isActive('blockquote') ?? false}\n      name=\"Quote\"\n    />\n  );\n};\n\nexport type EditorNodeCodeProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeCode = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleCodeBlock().run()}\n      hideName={hideName}\n      icon={CodeIcon}\n      isActive={() => editor.isActive('codeBlock') ?? false}\n      name=\"Code\"\n    />\n  );\n};\n\nexport type EditorNodeTableProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorNodeTable = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() =>\n        editor\n          .chain()\n          .focus()\n          .insertTable({ rows: 3, cols: 3, withHeaderRow: true })\n          .run()\n      }\n      hideName={hideName}\n      icon={TableIcon}\n      isActive={() => editor.isActive('table') ?? false}\n      name=\"Table\"\n    />\n  );\n};\n\nexport type EditorSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  title: string;\n};\n\nexport const EditorSelector = ({\n  open,\n  onOpenChange,\n  title,\n  className,\n  children,\n  ...props\n}: EditorSelectorProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Popover modal onOpenChange={onOpenChange} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          className=\"gap-2 rounded-none border-none\"\n          size=\"sm\"\n          variant=\"ghost\"\n        >\n          <span className=\"whitespace-nowrap text-xs\">{title}</span>\n          <ChevronDownIcon size={12} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        className={cn('w-48 p-1', className)}\n        sideOffset={5}\n        {...props}\n      >\n        {children}\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport type EditorFormatBoldProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatBold = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleBold().run()}\n      hideName={hideName}\n      icon={BoldIcon}\n      isActive={() => editor.isActive('bold') ?? false}\n      name=\"Bold\"\n    />\n  );\n};\n\nexport type EditorFormatItalicProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatItalic = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleItalic().run()}\n      hideName={hideName}\n      icon={ItalicIcon}\n      isActive={() => editor.isActive('italic') ?? false}\n      name=\"Italic\"\n    />\n  );\n};\n\nexport type EditorFormatStrikeProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatStrike = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleStrike().run()}\n      hideName={hideName}\n      icon={StrikethroughIcon}\n      isActive={() => editor.isActive('strike') ?? false}\n      name=\"Strikethrough\"\n    />\n  );\n};\n\nexport type EditorFormatCodeProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatCode = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleCode().run()}\n      hideName={hideName}\n      icon={CodeIcon}\n      isActive={() => editor.isActive('code') ?? false}\n      name=\"Code\"\n    />\n  );\n};\n\nexport type EditorFormatSubscriptProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatSubscript = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleSubscript().run()}\n      hideName={hideName}\n      icon={SubscriptIcon}\n      isActive={() => editor.isActive('subscript') ?? false}\n      name=\"Subscript\"\n    />\n  );\n};\n\nexport type EditorFormatSuperscriptProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatSuperscript = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleSuperscript().run()}\n      hideName={hideName}\n      icon={SuperscriptIcon}\n      isActive={() => editor.isActive('superscript') ?? false}\n      name=\"Superscript\"\n    />\n  );\n};\n\nexport type EditorFormatUnderlineProps = Pick<EditorButtonProps, 'hideName'>;\n\nexport const EditorFormatUnderline = ({\n  hideName = false,\n}: Pick<EditorButtonProps, 'hideName'>) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BubbleMenuButton\n      command={() => editor.chain().focus().toggleUnderline().run()}\n      hideName={hideName}\n      icon={UnderlineIcon}\n      isActive={() => editor.isActive('underline') ?? false}\n      name=\"Underline\"\n    />\n  );\n};\n\nexport type EditorLinkSelectorProps = {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nexport const EditorLinkSelector = ({\n  open,\n  onOpenChange,\n}: EditorLinkSelectorProps) => {\n  const [url, setUrl] = useState<string>('');\n  const inputReference = useRef<HTMLInputElement>(null);\n  const { editor } = useCurrentEditor();\n\n  const isValidUrl = (text: string): boolean => {\n    try {\n      new URL(text);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const getUrlFromString = (text: string): string | null => {\n    if (isValidUrl(text)) {\n      return text;\n    }\n    try {\n      if (text.includes('.') && !text.includes(' ')) {\n        return new URL(`https://${text}`).toString();\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    inputReference.current?.focus();\n  }, []);\n\n  if (!editor) {\n    return null;\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    const href = getUrlFromString(url);\n\n    if (href) {\n      editor.chain().focus().setLink({ href }).run();\n      onOpenChange?.(false);\n    }\n  };\n\n  const defaultValue = (editor.getAttributes('link') as { href?: string }).href;\n\n  return (\n    <Popover modal onOpenChange={onOpenChange} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          className=\"gap-2 rounded-none border-none\"\n          size=\"sm\"\n          variant=\"ghost\"\n        >\n          <ExternalLinkIcon size={12} />\n          <p\n            className={cn(\n              'text-xs underline decoration-text-muted underline-offset-4',\n              {\n                'text-primary': editor.isActive('link'),\n              }\n            )}\n          >\n            Link\n          </p>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"w-60 p-0\" sideOffset={10}>\n        <form className=\"flex p-1\" onSubmit={handleSubmit}>\n          <input\n            aria-label=\"Link URL\"\n            className=\"flex-1 bg-background p-1 text-sm outline-none\"\n            defaultValue={defaultValue ?? ''}\n            onChange={(event) => setUrl(event.target.value)}\n            placeholder=\"Paste a link\"\n            ref={inputReference}\n            type=\"text\"\n            value={url}\n          />\n          {editor.getAttributes('link').href ? (\n            <Button\n              className=\"flex h-8 items-center rounded-sm p-1 text-destructive transition-all hover:bg-destructive-foreground dark:hover:bg-destructive\"\n              onClick={() => {\n                editor.chain().focus().unsetLink().run();\n                onOpenChange?.(false);\n              }}\n              size=\"icon\"\n              type=\"button\"\n              variant=\"outline\"\n            >\n              <TrashIcon size={12} />\n            </Button>\n          ) : (\n            <Button className=\"h-8\" size=\"icon\" variant=\"secondary\">\n              <CheckIcon size={12} />\n            </Button>\n          )}\n        </form>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport type EditorTableMenuProps = {\n  children: ReactNode;\n};\n\nexport const EditorTableMenu = ({ children }: EditorTableMenuProps) => {\n  const { editor } = useCurrentEditor();\n\n  if (!editor) {\n    return null;\n  }\n\n  const isActive = editor.isActive('table');\n\n  return (\n    <div\n      className={cn({\n        hidden: !isActive,\n      })}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport type EditorTableGlobalMenuProps = {\n  children: ReactNode;\n};\n\nexport const EditorTableGlobalMenu = ({\n  children,\n}: EditorTableGlobalMenuProps) => {\n  const { editor } = useCurrentEditor();\n  const [top, setTop] = useState(0);\n  const [left, setLeft] = useState(0);\n\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n\n    editor.on('selectionUpdate', () => {\n      const selection = window.getSelection();\n\n      if (!selection) {\n        return;\n      }\n\n      const range = selection.getRangeAt(0);\n      let startContainer = range.startContainer as HTMLElement | string;\n\n      if (!(startContainer instanceof HTMLElement)) {\n        startContainer = range.startContainer.parentElement as HTMLElement;\n      }\n\n      const tableNode = startContainer.closest('table');\n\n      if (!tableNode) {\n        return;\n      }\n\n      const tableRect = tableNode.getBoundingClientRect();\n\n      setTop(tableRect.top + tableRect.height);\n      setLeft(tableRect.left + tableRect.width / 2);\n    });\n\n    return () => {\n      editor.off('selectionUpdate');\n    };\n  }, [editor]);\n\n  return (\n    <div\n      className={cn(\n        '-translate-x-1/2 absolute flex translate-y-1/2 items-center rounded-full border bg-background shadow-xl',\n        {\n          hidden: !(left || top),\n        }\n      )}\n      style={{ top, left }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport type EditorTableColumnMenuProps = {\n  children: ReactNode;\n};\n\nexport const EditorTableColumnMenu = ({\n  children,\n}: EditorTableColumnMenuProps) => {\n  const { editor } = useCurrentEditor();\n  const [top, setTop] = useState(0);\n  const [left, setLeft] = useState(0);\n\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n\n    editor.on('selectionUpdate', () => {\n      const selection = window.getSelection();\n\n      if (!selection) {\n        return;\n      }\n\n      const range = selection.getRangeAt(0);\n      let startContainer = range.startContainer as HTMLElement | string;\n\n      if (!(startContainer instanceof HTMLElement)) {\n        startContainer = range.startContainer.parentElement as HTMLElement;\n      }\n\n      // Get the closest table cell (td or th)\n      const tableCell = startContainer.closest('td, th');\n\n      if (!tableCell) {\n        return;\n      }\n\n      const cellRect = tableCell.getBoundingClientRect();\n\n      setTop(cellRect.top);\n      setLeft(cellRect.left + cellRect.width / 2);\n    });\n\n    return () => {\n      editor.off('selectionUpdate');\n    };\n  }, [editor]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger\n        asChild\n        className={cn(\n          '-translate-x-1/2 -translate-y-1/2 absolute flex h-4 w-7 overflow-hidden rounded-md border bg-background shadow-xl',\n          {\n            hidden: !(left || top),\n          }\n        )}\n        style={{ top, left }}\n      >\n        <Button size=\"icon\" variant=\"ghost\">\n          <EllipsisIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent>{children}</DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport type EditorTableRowMenuProps = {\n  children: ReactNode;\n};\n\nexport const EditorTableRowMenu = ({ children }: EditorTableRowMenuProps) => {\n  const { editor } = useCurrentEditor();\n  const [top, setTop] = useState(0);\n  const [left, setLeft] = useState(0);\n\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n\n    editor.on('selectionUpdate', () => {\n      const selection = window.getSelection();\n\n      if (!selection) {\n        return;\n      }\n\n      const range = selection.getRangeAt(0);\n      let startContainer = range.startContainer as HTMLElement | string;\n\n      if (!(startContainer instanceof HTMLElement)) {\n        startContainer = range.startContainer.parentElement as HTMLElement;\n      }\n\n      const tableRow = startContainer.closest('tr');\n\n      if (!tableRow) {\n        return;\n      }\n\n      const rowRect = tableRow.getBoundingClientRect();\n\n      setTop(rowRect.top + rowRect.height / 2);\n      setLeft(rowRect.left);\n    });\n\n    return () => {\n      editor.off('selectionUpdate');\n    };\n  }, [editor]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className={cn(\n            '-translate-x-1/2 -translate-y-1/2 absolute flex h-7 w-4 overflow-hidden rounded-md border bg-background shadow-xl',\n            {\n              hidden: !(left || top),\n            }\n          )}\n          size=\"icon\"\n          style={{ top, left }}\n          variant=\"ghost\"\n        >\n          <EllipsisVerticalIcon className=\"text-muted-foreground\" size={12} />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent>{children}</DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport const EditorTableColumnBefore = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().addColumnBefore().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <ArrowLeftIcon className=\"text-muted-foreground\" size={16} />\n      <span>Add column before</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableColumnAfter = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().addColumnAfter().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <ArrowRightIcon className=\"text-muted-foreground\" size={16} />\n      <span>Add column after</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableRowBefore = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().addRowBefore().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <ArrowUpIcon className=\"text-muted-foreground\" size={16} />\n      <span>Add row before</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableRowAfter = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().addRowAfter().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <ArrowDownIcon className=\"text-muted-foreground\" size={16} />\n      <span>Add row after</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableColumnDelete = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().deleteColumn().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <TrashIcon className=\"text-destructive\" size={16} />\n      <span>Delete column</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableRowDelete = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().deleteRow().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem className=\"flex items-center gap-2\" onClick={handleClick}>\n      <TrashIcon className=\"text-destructive\" size={16} />\n      <span>Delete row</span>\n    </DropdownMenuItem>\n  );\n};\n\nexport const EditorTableHeaderColumnToggle = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().toggleHeaderColumn().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <ColumnsIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Toggle header column</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport const EditorTableHeaderRowToggle = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().toggleHeaderRow().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <RowsIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Toggle header row</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport const EditorTableDelete = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().deleteTable().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <TrashIcon className=\"text-destructive\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Delete table</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport const EditorTableMergeCells = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().mergeCells().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <TableCellsMergeIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Merge cells</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport const EditorTableSplitCell = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().splitCell().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <TableColumnsSplitIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Split cell</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport const EditorTableFix = () => {\n  const { editor } = useCurrentEditor();\n\n  const handleClick = useCallback(() => {\n    if (editor) {\n      editor.chain().focus().fixTables().run();\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          className=\"flex items-center gap-2 rounded-full\"\n          onClick={handleClick}\n          size=\"icon\"\n          variant=\"ghost\"\n        >\n          <BoltIcon className=\"text-muted-foreground\" size={16} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>Fix table</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n};\n\nexport type EditorCharacterCountProps = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const EditorCharacterCount = {\n  Characters({ children, className }: EditorCharacterCountProps) {\n    const { editor } = useCurrentEditor();\n\n    if (!editor) {\n      return null;\n    }\n\n    return (\n      <div\n        className={cn(\n          'absolute right-4 bottom-4 rounded-md border bg-background p-2 text-muted-foreground text-sm shadow',\n          className\n        )}\n      >\n        {children}\n        {editor.storage.characterCount.characters()}\n      </div>\n    );\n  },\n\n  Words({ children, className }: EditorCharacterCountProps) {\n    const { editor } = useCurrentEditor();\n\n    if (!editor) {\n      return null;\n    }\n\n    return (\n      <div\n        className={cn(\n          'absolute right-4 bottom-4 rounded-md border bg-background p-2 text-muted-foreground text-sm shadow',\n          className\n        )}\n      >\n        {children}\n        {editor.storage.characterCount.words()}\n      </div>\n    );\n  },\n};\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "snippet",
      "type": "registry:ui",
      "description": "Code snippet component",
      "files": [
        {
          "path": "packages/snippet/index.tsx",
          "content": "'use client';\n\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport {\n  type ComponentProps,\n  cloneElement,\n  type HTMLAttributes,\n  type ReactElement,\n  useState,\n} from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\nexport type SnippetProps = ComponentProps<typeof Tabs>;\n\nexport const Snippet = ({ className, ...props }: SnippetProps) => (\n  <Tabs\n    className={cn(\n      'group w-full gap-0 overflow-hidden rounded-md border',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type SnippetHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const SnippetHeader = ({ className, ...props }: SnippetHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center justify-between border-b bg-secondary p-1',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type SnippetCopyButtonProps = ComponentProps<typeof Button> & {\n  value: string;\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const SnippetCopyButton = ({\n  asChild,\n  value,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  ...props\n}: SnippetCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !value\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const icon = isCopied ? <CheckIcon size={14} /> : <CopyIcon size={14} />;\n\n  return (\n    <Button\n      className=\"opacity-0 transition-opacity group-hover:opacity-100\"\n      onClick={copyToClipboard}\n      size=\"icon\"\n      variant=\"ghost\"\n      {...props}\n    >\n      {children ?? icon}\n    </Button>\n  );\n};\n\nexport type SnippetTabsListProps = ComponentProps<typeof TabsList>;\n\nexport const SnippetTabsList = TabsList;\n\nexport type SnippetTabsTriggerProps = ComponentProps<typeof TabsTrigger>;\n\nexport const SnippetTabsTrigger = ({\n  className,\n  ...props\n}: SnippetTabsTriggerProps) => (\n  <TabsTrigger className={cn('gap-1.5', className)} {...props} />\n);\n\nexport type SnippetTabsContentProps = ComponentProps<typeof TabsContent>;\n\nexport const SnippetTabsContent = ({\n  className,\n  children,\n  ...props\n}: SnippetTabsContentProps) => (\n  <TabsContent\n    asChild\n    className={cn('mt-0 bg-background p-4 text-sm', className)}\n    {...props}\n  >\n    <pre className=\"truncate\">{children}</pre>\n  </TabsContent>\n);\n",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "ticker",
      "type": "registry:ui",
      "description": "Ticker component for displaying real-time data",
      "files": [
        {
          "path": "packages/ticker/index.tsx",
          "content": "'use client';\n\nimport type { HTMLAttributes, ReactNode } from 'react';\nimport { createContext, memo, useContext, useMemo } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@repo/shadcn-ui/components/ui/avatar';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\n\ntype TickerContextValue = {\n    formatter: Intl.NumberFormat;\n};\n\nconst DEFAULT_CURRENCY = 'USD';\nconst DEFAULT_LOCALE = 'en-US';\n\nconst defaultFormatter = new Intl.NumberFormat(DEFAULT_LOCALE, {\n    style: 'currency',\n    currency: DEFAULT_CURRENCY,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n});\n\nconst TickerContext = createContext<TickerContextValue>({\n    formatter: defaultFormatter,\n});\n\nexport const useTickerContext = () => useContext(TickerContext);\n\nexport type TickerProps = HTMLAttributes<HTMLButtonElement> & {\n    currency?: string;\n    locale?: string;\n};\n\nexport const Ticker = memo(\n    ({\n        children,\n        className,\n        currency = DEFAULT_CURRENCY,\n        locale = DEFAULT_LOCALE,\n        ...props\n    }: TickerProps & { children: ReactNode }) => {\n        const formatter = useMemo(() => {\n            try {\n                return new Intl.NumberFormat(locale, {\n                    style: 'currency',\n                    currency: currency.toUpperCase(),\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                });\n            } catch {\n                return defaultFormatter;\n            }\n        }, [currency, locale]);\n\n        return (\n            <TickerContext.Provider value={{ formatter }}>\n                <button\n                    className={cn(\n                        'inline-flex items-center gap-1.5 whitespace-nowrap align-middle',\n                        className\n                    )}\n                    type=\"button\"\n                    {...props}\n                >\n                    {children}\n                </button>\n            </TickerContext.Provider>\n        );\n    }\n);\nTicker.displayName = 'Ticker';\n\nexport type TickerIconProps = HTMLAttributes<HTMLImageElement> & {\n    src: string;\n    symbol: string;\n};\n\nexport const TickerIcon = memo(\n    ({ src, symbol, className, ...props }: TickerIconProps) => {\n        if (!src) {\n            return null;\n        }\n        return (\n            <Avatar\n                className={cn('size-7 border border-border bg-muted p-1', className)}\n            >\n                <AvatarImage src={src} {...props} />\n                <AvatarFallback className=\"font-semibold text-muted-foreground text-sm\">\n                    {symbol.slice(0, 2).toUpperCase()}\n                </AvatarFallback>\n            </Avatar>\n        );\n    }\n);\nTickerIcon.displayName = 'TickerIcon';\n\nexport type TickerSymbolProps = HTMLAttributes<HTMLSpanElement> & {\n    symbol: string;\n};\n\nexport const TickerSymbol = memo(\n    ({ symbol, className, ...props }: TickerSymbolProps) => (\n        <span className={cn('font-medium', className)} {...props}>\n            {symbol.toUpperCase()}\n        </span>\n    )\n);\nTickerSymbol.displayName = 'TickerSymbol';\n\nexport type TickerPriceProps = HTMLAttributes<HTMLSpanElement> & {\n    price: number;\n};\n\nexport const TickerPrice = memo(\n    ({ price, className, ...props }: TickerPriceProps) => {\n        const context = useTickerContext();\n\n        const formattedPrice = useMemo(\n            () => context.formatter.format(price),\n            [price, context]\n        );\n\n        return (\n            <span className={cn('text-muted-foreground', className)} {...props}>\n                {formattedPrice}\n            </span>\n        );\n    }\n);\nTickerPrice.displayName = 'TickerPrice';\n\nexport type TickerPriceChangeProps = HTMLAttributes<HTMLSpanElement> & {\n    change: number;\n    isPercent?: boolean;\n};\n\nexport const TickerPriceChange = memo(\n    ({ change, isPercent, className, ...props }: TickerPriceChangeProps) => {\n        const isPositiveChange = useMemo(() => change >= 0, [change]);\n        const context = useTickerContext();\n\n        const changeFormatted = useMemo(() => {\n            if (isPercent) {\n                return `${change.toFixed(2)}%`;\n            }\n            return context.formatter.format(change);\n        }, [change, isPercent, context]);\n\n        return (\n            <span\n                className={cn(\n                    'flex items-center gap-0.5',\n                    isPositiveChange\n                        ? 'text-green-600 dark:text-green-500'\n                        : 'text-red-600 dark:text-red-500',\n                    className\n                )}\n                {...props}\n            >\n                <svg\n                    aria-labelledby=\"ticker-change-icon-title\"\n                    className={isPositiveChange ? '' : 'rotate-180'}\n                    fill=\"currentColor\"\n                    height=\"12\"\n                    role=\"img\"\n                    viewBox=\"0 0 24 24\"\n                    width=\"12\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <title id=\"ticker-change-icon-title\">\n                        {isPositiveChange ? 'Up icon' : 'Down icon'}\n                    </title>\n                    <path d=\"M24 22h-24l12-20z\" />\n                </svg>\n                {changeFormatted}\n            </span>\n        );\n    }\n);\nTickerPriceChange.displayName = 'TickerPriceChange';\n",
          "type": "registry:component"
        }
      ]
    }
  ]
}
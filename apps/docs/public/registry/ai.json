{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://ui.dedevs.club/ai",
  "name": "ai",
  "type": "registry:ui",
  "author": "DeDevsClub <admin@dedevs.club>",
  "registryDependencies": [
    "textarea",
    "button",
    "select",
    "textarea"
  ],
  "dependencies": [
    "lucide-react",
    "react-markdown",
    "remark-gfm"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "chatv0.tsx",
      "content": "'use client';\n\nimport {\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type KeyboardEvent,\n} from 'react';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\n// import { useAutoResizeTextarea } from '@/hooks/use-auto-resize-textarea';\nimport {\n  ImageIcon,\n  FileUp,\n  Figma,\n  MonitorIcon,\n  CircleUserRound,\n  ArrowUpIcon,\n  Paperclip,\n  PlusIcon,\n} from 'lucide-react';\n\ninterface UseAutoResizeTextareaProps {\n  minHeight: number;\n  maxHeight?: number;\n}\n\nfunction useAutoResizeTextarea({\n  minHeight,\n  maxHeight,\n}: UseAutoResizeTextareaProps) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback(\n    (reset?: boolean) => {\n      const textarea = textareaRef.current;\n      if (!textarea) return;\n\n      if (reset) {\n        textarea.style.height = `${minHeight}px`;\n        return;\n      }\n\n      // Temporarily shrink to get the right scrollHeight\n      textarea.style.height = `${minHeight}px`;\n\n      // Calculate new height\n      const newHeight = Math.max(\n        minHeight,\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\n      );\n\n      textarea.style.height = `${newHeight}px`;\n    },\n    [minHeight, maxHeight]\n  );\n\n  useEffect(() => {\n    // Set initial height\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = `${minHeight}px`;\n    }\n  }, [minHeight]);\n\n  // Adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  return { textareaRef, adjustHeight };\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant';\n}\n\nexport interface ChatV0Props {\n  className?: string;\n  onMessage?: (message: Message) => void;\n  onMessageError?: (error: Error) => void;\n  onMessageStart?: () => void;\n  onMessageEnd?: () => void;\n  placeholder?: string;\n  minHeight?: number;\n  maxHeight?: number;\n  actionButtons?: ActionButtonProps[];\n  sendButtonLabel?: string;\n  attachButtonLabel?: string;\n  projectButtonLabel?: string;\n}\n\nexport const ChatV0 = ({\n  className,\n  onMessage,\n  onMessageError,\n  onMessageStart,\n  onMessageEnd,\n  placeholder = 'Ask v0 a question...',\n  minHeight = 60,\n  maxHeight = 200,\n  actionButtons = [\n    { icon: <ImageIcon className=\"w-4 h-4\" />, label: 'Clone a Screenshot' },\n    { icon: <Figma className=\"w-4 h-4\" />, label: 'Import from Figma' },\n    { icon: <FileUp className=\"w-4 h-4\" />, label: 'Upload a Project' },\n    { icon: <MonitorIcon className=\"w-4 h-4\" />, label: 'Landing Page' },\n    { icon: <CircleUserRound className=\"w-4 h-4\" />, label: 'Sign Up Form' },\n  ],\n  sendButtonLabel = 'Send',\n  attachButtonLabel = 'Attach',\n  projectButtonLabel = 'Project',\n}: ChatV0Props) => {\n  const [value, setValue] = useState('');\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n  });\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (value.trim()) {\n        setValue('');\n        adjustHeight(true);\n      }\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8',\n        className\n      )}\n    >\n      <h1 className=\"text-2xl sm:text-4xl font-bold text-white dark:text-white text-center\">\n        What can I help you ship?\n      </h1>\n\n      <div className=\"w-full\">\n        <div className=\"relative bg-neutral-900 rounded-xl border border-neutral-800\">\n          <div className=\"overflow-y-auto\">\n            <Textarea\n              ref={textareaRef}\n              value={value}\n              onChange={(e) => {\n                setValue(e.target.value);\n                adjustHeight();\n              }}\n              onKeyDown={handleKeyDown}\n              placeholder={placeholder}\n              className={cn(\n                'w-full px-4 py-3',\n                'resize-none',\n                'bg-transparent',\n                'border-none',\n                'text-white text-sm',\n                'focus:outline-none',\n                'focus-visible:ring-0 focus-visible:ring-offset-0',\n                'placeholder:text-neutral-500 placeholder:text-sm',\n                'min-h-[60px]'\n              )}\n              style={{\n                overflow: 'hidden',\n              }}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between p-3\">\n            <div className=\"flex items-center gap-2\">\n              <button\n                type=\"button\"\n                className=\"group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1\"\n              >\n                <Paperclip className=\"w-4 h-4 text-white\" />\n                <span className=\"text-xs text-zinc-400 hidden group-hover:inline transition-opacity\">\n                  {attachButtonLabel}\n                </span>\n              </button>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <button\n                type=\"button\"\n                className=\"px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\"\n              >\n                <PlusIcon className=\"w-4 h-4\" />\n                {projectButtonLabel}\n              </button>\n              <button\n                type=\"button\"\n                className={cn(\n                  'px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1',\n                  value.trim() ? 'bg-white text-black' : 'text-zinc-400'\n                )}\n              >\n                <ArrowUpIcon\n                  className={cn(\n                    'w-4 h-4',\n                    value.trim() ? 'text-black' : 'text-zinc-400'\n                  )}\n                />\n                <span className=\"sr-only\">{sendButtonLabel}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 -mx-4 px-4 sm:mx-0 sm:px-0\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide\">\n            {actionButtons.map((button, index) => (\n              <ActionButton\n                key={index}\n                icon={button.icon}\n                label={button.label}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface ActionButtonProps {\n  icon: ReactNode;\n  label: string;\n}\n\nfunction ActionButton({ icon, label }: ActionButtonProps) {\n  return (\n    <button\n      type=\"button\"\n      className=\"flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0\"\n    >\n      {icon}\n      <span className=\"text-xs\">{label}</span>\n    </button>\n  );\n}\n",
      "target": "components/ui/dedevs-ui/ai/chatv0.tsx"
    },
    {
      "type": "registry:ui",
      "path": "input.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport { Children, useCallback, useEffect, useRef } from 'react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from 'react';\n\ntype UseAutoResizeTextareaProps = {\n  minHeight: number;\n  maxHeight?: number;\n};\n\nconst useAutoResizeTextarea = ({\n  minHeight,\n  maxHeight,\n}: UseAutoResizeTextareaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback(\n    (reset?: boolean) => {\n      const textarea = textareaRef.current;\n      if (!textarea) {\n        return;\n      }\n\n      if (reset) {\n        textarea.style.height = `${minHeight}px`;\n        return;\n      }\n\n      // Temporarily shrink to get the right scrollHeight\n      textarea.style.height = `${minHeight}px`;\n\n      // Calculate new height\n      const newHeight = Math.max(\n        minHeight,\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\n      );\n\n      textarea.style.height = `${newHeight}px`;\n    },\n    [minHeight, maxHeight]\n  );\n\n  useEffect(() => {\n    // Set initial height\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = `${minHeight}px`;\n    }\n  }, [minHeight]);\n\n  // Adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  return { textareaRef, adjustHeight };\n};\n\nexport type AIInputProps = HTMLAttributes<HTMLFormElement>;\n\nexport const AIInput = ({ className, ...props }: AIInputProps) => (\n  <form\n    className={cn(\n      'w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\n\nexport const AIInputTextarea = ({\n  onChange,\n  className,\n  placeholder = 'What would you like to know?',\n  minHeight = 48,\n  maxHeight = 164,\n  ...props\n}: AIInputTextareaProps) => {\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n  });\n\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      const form = e.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      name=\"message\"\n      placeholder={placeholder}\n      ref={textareaRef}\n      className={cn(\n        'w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0',\n        className\n      )}\n      onChange={(e) => {\n        adjustHeight();\n        onChange?.(e);\n      }}\n      onKeyDown={handleKeyDown}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputToolbarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputToolbar = ({\n  className,\n  ...props\n}: AIInputToolbarProps) => (\n  <div\n    className={cn('flex items-center justify-between p-1', className)}\n    {...props}\n  />\n);\n\nexport type AIInputToolsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputTools = ({ className, ...props }: AIInputToolsProps) => (\n  <div className={cn('flex items-center gap-1', className)} {...props} />\n);\n\nexport type AIInputButtonProps = ComponentProps<typeof Button>;\n\nexport const AIInputButton = ({\n  variant = 'ghost',\n  className,\n  size,\n  ...props\n}: AIInputButtonProps) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';\n\n  return (\n    <Button\n      type=\"button\"\n      variant={variant}\n      size={newSize}\n      className={cn(\n        'shrink-0 gap-1.5 text-muted-foreground',\n        newSize === 'default' && 'px-3',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputSubmitProps = ComponentProps<typeof Button>;\n\nexport const AIInputSubmit = ({\n  className,\n  variant = 'ghost',\n  size = 'icon',\n  ...props\n}: AIInputSubmitProps) => (\n  <Button\n    type=\"submit\"\n    variant={variant}\n    size={size}\n    className={cn('gap-1.5 text-muted-foreground', className)}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectProps = ComponentProps<typeof Select>;\n\nexport const AIInputModelSelect = (props: AIInputModelSelectProps) => (\n  <Select {...props} />\n);\n\nexport type AIInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nexport const AIInputModelSelectTrigger = ({\n  className,\n  ...props\n}: AIInputModelSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors',\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nexport const AIInputModelSelectContent = ({\n  className,\n  ...props\n}: AIInputModelSelectContentProps) => (\n  <SelectContent className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const AIInputModelSelectItem = ({\n  className,\n  ...props\n}: AIInputModelSelectItemProps) => (\n  <SelectItem className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const AIInputModelSelectValue = ({\n  className,\n  ...props\n}: AIInputModelSelectValueProps) => (\n  <SelectValue className={cn(className)} {...props} />\n);\n",
      "target": "components/ui/dedevs-ui/ai/input.tsx"
    }
  ]
}
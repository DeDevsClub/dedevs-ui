{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://ui.dedevs.club/select",
  "name": "select",
  "type": "registry:ui",
  "author": "DeDevsClub <admin@dedevs.club>",
  "registryDependencies": ["form", "select", "badge", "command"],
  "dependencies": [
    "@opentelemetry/instrumentation",
    "@repo/typescript-config",
    "@tabler/icons-react",
    "@tanstack/react-table",
    "cmdk",
    "jotai",
    "lucide-react",
    "react-markdown",
    "remark-gfm"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "dropdown.tsx",
      "content": "import { IconLoader } from '@tabler/icons-react';\nimport { cn } from '@/lib/utils';\nimport { FormControl } from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nexport interface DropdownSelectProps {\n  onValueChange?: (value: string) => void;\n  defaultValue: string | undefined;\n  placeholder?: string;\n  isPending?: boolean;\n  items: { label: string; value: string }[] | undefined;\n  disabled?: boolean;\n  className?: string;\n  isControlled?: boolean;\n}\n\nexport const DropdownSelect = ({\n  defaultValue,\n  onValueChange,\n  isPending,\n  items,\n  placeholder,\n  disabled,\n  className = '',\n  isControlled = false,\n}: DropdownSelectProps) => {\n  const defaultState = isControlled\n    ? { value: defaultValue, onValueChange }\n    : { defaultValue, onValueChange };\n  return (\n    <Select {...defaultState}>\n      <FormControl>\n        <SelectTrigger disabled={disabled} className={cn(className)}>\n          <SelectValue placeholder={placeholder ?? 'Select'} />\n        </SelectTrigger>\n      </FormControl>\n      <SelectContent>\n        {isPending ? (\n          <SelectItem disabled value=\"loading\" className=\"h-14\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <IconLoader className=\"h-5 w-5 animate-spin\" />\n              {'  '}\n              Loading...\n            </div>\n          </SelectItem>\n        ) : (\n          items?.map(({ label, value }) => (\n            <SelectItem key={value} value={value}>\n              {label}\n            </SelectItem>\n          ))\n        )}\n      </SelectContent>\n    </Select>\n  );\n};\n",
      "target": "components/ui/dedevs-ui/select/dropdown.tsx"
    },
    {
      "type": "registry:ui",
      "path": "fancy-multi.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { X } from 'lucide-react';\n\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Command as CommandPrimitive } from 'cmdk';\n\ntype Framework = Record<'value' | 'label', string>;\n\nconst FRAMEWORKS = [\n  {\n    value: 'next.js',\n    label: 'Next.js',\n  },\n  {\n    value: 'sveltekit',\n    label: 'SvelteKit',\n  },\n  {\n    value: 'nuxt.js',\n    label: 'Nuxt.js',\n  },\n  {\n    value: 'remix',\n    label: 'Remix',\n  },\n  {\n    value: 'astro',\n    label: 'Astro',\n  },\n  {\n    value: 'wordpress',\n    label: 'WordPress',\n  },\n  {\n    value: 'express.js',\n    label: 'Express.js',\n  },\n  {\n    value: 'nest.js',\n    label: 'Nest.js',\n  },\n] satisfies Framework[];\n\nexport interface FancyMultiSelectProps {\n  defaultSelected?: Framework[];\n  onSelectionChange?: (selected: Framework[]) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport const FancyMultiSelect = ({\n  defaultSelected = [FRAMEWORKS[1]],\n  onSelectionChange,\n  placeholder = 'Select frameworks...',\n  className = '',\n}: FancyMultiSelectProps) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [open, setOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<Framework[]>(defaultSelected);\n  const [inputValue, setInputValue] = React.useState('');\n\n  const handleUnselect = React.useCallback(\n    (framework: Framework) => {\n      setSelected((prev) => {\n        const newSelected = prev.filter((s) => s.value !== framework.value);\n        onSelectionChange?.(newSelected);\n        return newSelected;\n      });\n    },\n    [onSelectionChange]\n  );\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current;\n      if (input) {\n        if (\n          (e.key === 'Delete' || e.key === 'Backspace') &&\n          input.value === ''\n        ) {\n          setSelected((prev) => {\n            const newSelected = [...prev];\n            newSelected.pop();\n            onSelectionChange?.(newSelected);\n            return newSelected;\n          });\n        }\n        if (e.key === 'Escape') {\n          input.blur();\n        }\n      }\n    },\n    [onSelectionChange]\n  );\n\n  const selectables = FRAMEWORKS.filter(\n    (framework) => !selected.includes(framework)\n  );\n\n  return (\n    <Command\n      onKeyDown={handleKeyDown}\n      className={`overflow-visible bg-transparent ${className}`}\n    >\n      <div className=\"group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\">\n        <div className=\"flex flex-wrap gap-1\">\n          {selected.map((framework) => (\n            <Badge key={framework.value} variant=\"secondary\">\n              {framework.label}\n              <button\n                className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    handleUnselect(framework);\n                  }\n                }}\n                onMouseDown={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                }}\n                onClick={() => handleUnselect(framework)}\n              >\n                <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n              </button>\n            </Badge>\n          ))}\n          <CommandPrimitive.Input\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => setOpen(true)}\n            placeholder={placeholder}\n            className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\n          />\n        </div>\n      </div>\n      <div className=\"relative mt-2\">\n        <CommandList>\n          {open && selectables.length > 0 ? (\n            <div className=\"absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\n              <CommandGroup className=\"h-full overflow-auto\">\n                {selectables.map((framework) => (\n                  <CommandItem\n                    key={framework.value}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    onSelect={() => {\n                      setInputValue('');\n                      setSelected((prev) => {\n                        const newSelected = [...prev, framework];\n                        onSelectionChange?.(newSelected);\n                        return newSelected;\n                      });\n                    }}\n                    className={'cursor-pointer'}\n                  >\n                    {framework.label}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </div>\n          ) : null}\n        </CommandList>\n      </div>\n    </Command>\n  );\n};\n",
      "target": "components/ui/dedevs-ui/select/fancy-multi.tsx"
    }
  ]
}

{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://ui.dedevs.club/buttons",
  "name": "buttons",
  "type": "registry:ui",
  "author": "DeDevsClub <admin@dedevs.club>",
  "registryDependencies": [
    "avatar",
    "badge",
    "button",
    "button"
  ],
  "dependencies": [
    "clsx",
    "framer-motion",
    "lucide-react",
    "tailwind-merge",
    "usehooks-ts"
  ],
  "devDependencies": [
    "tailwindcss"
  ],
  "files": [
    {
      "type": "registry:ui",
      "path": "pill.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge, type BadgeProps } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { ChevronDownIcon, ChevronUpIcon, MinusIcon } from 'lucide-react';\nimport type { ComponentProps, ReactNode } from 'react';\n\nexport type PillProps = BadgeProps & {\n  themed?: boolean;\n};\n\nexport const Pill = ({\n  variant = 'secondary',\n  themed = false,\n  className,\n  ...props\n}: PillProps) => (\n  <Badge\n    variant={variant}\n    className={cn('gap-2 rounded-full px-3 py-1.5 font-normal', className)}\n    {...props}\n  />\n);\n\nexport type PillAvatarProps = ComponentProps<typeof AvatarImage> & {\n  fallback?: string;\n};\n\nexport const PillAvatar = ({\n  fallback,\n  className,\n  ...props\n}: PillAvatarProps) => (\n  <Avatar className={cn('-ml-1 h-4 w-4', className)}>\n    <AvatarImage {...props} />\n    <AvatarFallback>{fallback}</AvatarFallback>\n  </Avatar>\n);\n\nexport type PillButtonProps = ComponentProps<typeof Button>;\n\nexport const PillButton = ({ className, ...props }: PillButtonProps) => (\n  <Button\n    variant=\"ghost\"\n    size=\"icon\"\n    className={cn(\n      '-my-2 -mr-2 size-6 rounded-full p-0.5 hover:bg-foreground/5',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type PillStatusProps = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const PillStatus = ({\n  children,\n  className,\n  ...props\n}: PillStatusProps) => (\n  <div\n    className={cn(\n      'flex items-center gap-2 border-r pr-2 font-medium',\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport type PillIndicatorProps = {\n  variant?: 'success' | 'error' | 'warning' | 'info';\n  pulse?: boolean;\n};\n\nexport const PillIndicator = ({\n  variant = 'success',\n  pulse = false,\n}: PillIndicatorProps) => (\n  <span className=\"relative flex size-2\">\n    {pulse && (\n      <span\n        className={cn(\n          'absolute inline-flex h-full w-full animate-ping rounded-full opacity-75',\n          variant === 'success' && 'bg-emerald-400',\n          variant === 'error' && 'bg-rose-400',\n          variant === 'warning' && 'bg-amber-400',\n          variant === 'info' && 'bg-sky-400'\n        )}\n      />\n    )}\n    <span\n      className={cn(\n        'relative inline-flex size-2 rounded-full',\n        variant === 'success' && 'bg-emerald-500',\n        variant === 'error' && 'bg-rose-500',\n        variant === 'warning' && 'bg-amber-500',\n        variant === 'info' && 'bg-sky-500'\n      )}\n    />\n  </span>\n);\n\nexport type PillDeltaProps = {\n  children: ReactNode;\n  className?: string;\n  delta: number;\n};\n\nexport const PillDelta = ({ className, delta }: PillDeltaProps) => {\n  if (!delta) {\n    return (\n      <MinusIcon className={cn('size-3 text-muted-foreground', className)} />\n    );\n  }\n\n  if (delta > 0) {\n    return (\n      <ChevronUpIcon className={cn('size-3 text-emerald-500', className)} />\n    );\n  }\n\n  return <ChevronDownIcon className={cn('size-3 text-rose-500', className)} />;\n};\n\nexport type PillIconProps = {\n  icon: typeof ChevronUpIcon;\n  className?: string;\n};\n\nexport const PillIcon = ({\n  icon: Icon,\n  className,\n  ...props\n}: PillIconProps) => (\n  <Icon\n    size={12}\n    className={cn('size-3 text-muted-foreground', className)}\n    {...props}\n  />\n);\n\nexport type PillAvatarGroupProps = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const PillAvatarGroup = ({\n  children,\n  className,\n  ...props\n}: PillAvatarGroupProps) => (\n  <div\n    className={cn(\n      '-space-x-1 flex items-center',\n      '[&>*:not(:first-of-type)]:[mask-image:radial-gradient(circle_9px_at_-4px_50%,transparent_99%,white_100%)]',\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n",
      "target": "components/ui/dedevs-ui/buttons/pill.tsx"
    },
    {
      "type": "registry:ui",
      "path": "copy.tsx",
      "content": "'use client';\n\nimport type React from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Check, Copy as CopyIcon } from 'lucide-react';\nimport { useState } from 'react';\n\nexport interface CopyProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  title: string;\n  textToCopy: string;\n  textOnCopy?: string;\n  successDuration?: number;\n}\n\nexport const Copy = ({\n  className,\n  title,\n  textToCopy = 'npx dedevs-ui@latest add buttons/copy',\n  textOnCopy = 'Copied',\n  successDuration = 1000,\n  ...props\n}: CopyProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  async function handleCopy() {\n    try {\n      await navigator.clipboard.writeText(textToCopy);\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), successDuration);\n    } catch (err) {\n      console.error('Failed to copy text:', err);\n    }\n  }\n\n  return (\n    <Button\n      className={cn(\n        'min-w-40 relative group',\n        'bg-emerald-50 dark:bg-emerald-950',\n        'hover:bg-emerald-100 dark:hover:bg-emerald-900',\n        'text-emerald-600 dark:text-emerald-300',\n        'border border-emerald-200 dark:border-emerald-800',\n        isCopied && 'bg-emerald-100 dark:bg-emerald-900',\n        className\n      )}\n      onClick={handleCopy}\n      {...props}\n    >\n      <div\n        className={cn(\n          'w-full flex items-center justify-center gap-2',\n          'transition-transform duration-200',\n          isCopied && 'scale-105'\n        )}\n      >\n        {isCopied ? (\n          <>\n            <Check className=\"w-4 h-4 text-emerald-500\" />\n            <span>{textOnCopy}</span>\n          </>\n        ) : (\n          <>\n            <CopyIcon\n              className={cn(\n                'w-4 h-4 transition-transform duration-200',\n                'group-hover:scale-110'\n              )}\n            />\n            <span>{title}</span>\n          </>\n        )}\n      </div>\n    </Button>\n  );\n};\n",
      "target": "components/ui/dedevs-ui/buttons/copy.tsx"
    }
  ]
}